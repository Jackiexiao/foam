{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Foam # Foam is a personal knowledge management and sharing system inspired by Roam Research , built on Visual Studio Code and GitHub . You can use Foam for organising your research, keeping re-discoverable notes, writing long-form content and, optionally, publishing it to the web. Foam is free, open source, and extremely extensible to suit your personal workflow. You own the information you create with Foam, and you're free to share it, and collaborate on it with anyone you want. Info New! Join Foam community Discord for users and contributors! Star Use foam-jekyll-template How do I use Foam? # Foam is a tool that supports creating relationships between thoughts and information to help you think better. Whether you want to build a Second Brain or a Zettelkasten , write a book, or just get better at long-term learning, Foam can help you organise your thoughts if you follow these simple rules: Create a single Foam workspace for all your knowledge and research following the Getting started guide. Write your thoughts in markdown documents (I like to call them Bubbles , but that might be more than a little twee). These documents should be atomic: Put things that belong together into a single document, and limit its content to that single topic. ( source ) Use Foam's shortcuts and autocompletions to link your thoughts together with [wiki-links](./wiki-links.md) , and navigate between them to explore your knowledge graph. Get an overview of your Foam workspace using a graph-visualisation (\u26a0\ufe0f WIP), and discover relationships between your thoughts with the use of backlinking . Foam is a like a bathtub: What you get out of it depends on what you put into it. What's in a Foam? # Like the soapy suds it's named after, Foam is mostly air. The editing experience of Foam is powered by VS Code, enhanced by workspace settings that glue together recommended-extensions and preferences optimised for writing and navigating information. To back up, collaborate on and share your content between devices, Foam pairs well with GitHub . To publish your content, you can set it up to publish to GitHub Pages with zero code and zero config, or to any website hosting platform like Netlify or Vercel . Fun fact : This documentation was researched, written and published using Foam . Getting started # \u26a0\ufe0f Foam is still in preview. Expect the experience to be a little rough. These instructions assume you have a GitHub account, and you have Visual Studio Code installed. Use the foam-template project to generate a new repository. If you're logged into GitHub, you can just hit this button: Use this template If you want to keep your thoughts to yourself, remember to set the repository private, or if you don't want to use GitHub to host your workspace at all, choose Download as ZIP instead of **Use this template* .* Clone the repository locally and open it in VS Code. Open the repository as a folder using the File > Open... menu item. In VS Code, \"open workspace\" refers to multi-root workspaces . When prompted to install recommended extensions, click Install all (or Show Recommendations if you want to review and install them one by one) After setting up the repository, open .vscode/settings.json and edit, add or remove any settings you'd like for your Foam workspace. To learn more about how to use Foam , read the recipes . Getting stuck in the setup? Read the frequently-asked-questions . There are known-issues , and I'm sure, many unknown issues! Please report them on GitHub ! Features # Foam doesn't have features in the traditional sense. Out of the box, you have access to all features of VS Code and all the recommended-extensions you choose to install, but it's up to you to discover what you can do with it! Head over to recipes for some useful patterns and ideas! Call To Adventure # The goal of Foam is to be your personal companion on your quest for knowledge. It's currently about \"10% ready\" relative to all the features I've thought of, but I've only thought of ~1% of the features it could have, and I'm excited to learn from others. I am using it as my personal thinking tool. By making it public, I hope to learn from others not only how to improve Foam, but also to improve how I learn and manage information. If that sounds like something you're interested in, I'd love to have you along on the journey. Check out roadmap to see what's in the plans Read about our principles to understand Foam's philosophy and direction Read the contribution-guide guide to learn how to participate. Feel free to open GitHub issues to give me feedback and ideas for new features. Thanks and attribution # Foam is built by Jani Ev\u00e4kallio ( @jevakallio ), and all our contributors: Jani Ev\u00e4kallio \ud83d\udcbb \ud83d\udcd6 Joe Previte \ud83d\udcbb \ud83d\udcd6 Riccardo \ud83d\udcbb \ud83d\udcd6 Janne Ojanaho \ud83d\udcbb \ud83d\udcd6 Paul Shen \ud83d\udcd6 coffenbacher \ud83d\udcd6 Mathieu Dutour \ud83d\udcd6 Michael Hansen \ud83d\udcd6 David Nadlinger \ud83d\udcd6 Fernando \ud83d\udcd6 Juan Gonzalez \ud83d\udcd6 Louie Christie \ud83d\udcd6 Sandro \ud83d\udcd6 Simon Knott \ud83d\udcd6 Steven \ud83d\udcd6 Tim \ud83d\udcd6 Saurav Khdoolia \ud83d\udcd6 Ankit Tiwari \ud83d\udcd6 \u26a0\ufe0f \ud83d\udcbb Ayush Baweja \ud83d\udcd6 TaiChi-IO \ud83d\udcd6 Juan F Gonzalez \ud83d\udcd6 Sanket Dasgupta \ud83d\udcd6 Nicholas Stafie \ud83d\udcd6 Francis Hamel \ud83d\udcbb digiguru \ud83d\udcbb \ud83d\udcd6 CHIRAG SINGHAL \ud83d\udcbb Jonathan Carter \ud83d\udcd6 Julian Elve \ud83d\udcd6 Thomas Koppelaar \ud83d\udcac \ud83d\udcbb \ud83d\udcd3 Akshay \ud83d\udcbb John Lindquist \ud83d\udcd6 Ashwin Ramaswami \ud83d\udcd6 Claudio Canales \ud83d\udcd6 vitaly-pevgonen \ud83d\udcd6 Dmitry Shemetov \ud83d\udcd6 hooncp \ud83d\udcd6 Martin Laws \ud83d\udcd6 Sean K Smith \ud83d\udcbb Kevin Neely \ud83d\udcd6 Arief Rahmansyah \ud83d\udcd6 Vishesh Handa \ud83d\udcd6 Hitesh Kumar \ud83d\udcd6 Spencer Woo \ud83d\udcd6 Foam was inspired by Roam Research and the Zettelkasten methodology Foam wouldn't be possible without Visual Studio Code and GitHub , and relies heavily on our fantastic open source recommended-extensions and all their contributors! License # Foam is licensed under the MIT license .","title":"Foam"},{"location":"#foam","text":"Foam is a personal knowledge management and sharing system inspired by Roam Research , built on Visual Studio Code and GitHub . You can use Foam for organising your research, keeping re-discoverable notes, writing long-form content and, optionally, publishing it to the web. Foam is free, open source, and extremely extensible to suit your personal workflow. You own the information you create with Foam, and you're free to share it, and collaborate on it with anyone you want. Info New! Join Foam community Discord for users and contributors! Star Use foam-jekyll-template","title":"Foam"},{"location":"#how-do-i-use-foam","text":"Foam is a tool that supports creating relationships between thoughts and information to help you think better. Whether you want to build a Second Brain or a Zettelkasten , write a book, or just get better at long-term learning, Foam can help you organise your thoughts if you follow these simple rules: Create a single Foam workspace for all your knowledge and research following the Getting started guide. Write your thoughts in markdown documents (I like to call them Bubbles , but that might be more than a little twee). These documents should be atomic: Put things that belong together into a single document, and limit its content to that single topic. ( source ) Use Foam's shortcuts and autocompletions to link your thoughts together with [wiki-links](./wiki-links.md) , and navigate between them to explore your knowledge graph. Get an overview of your Foam workspace using a graph-visualisation (\u26a0\ufe0f WIP), and discover relationships between your thoughts with the use of backlinking . Foam is a like a bathtub: What you get out of it depends on what you put into it.","title":"How do I use Foam?"},{"location":"#whats-in-a-foam","text":"Like the soapy suds it's named after, Foam is mostly air. The editing experience of Foam is powered by VS Code, enhanced by workspace settings that glue together recommended-extensions and preferences optimised for writing and navigating information. To back up, collaborate on and share your content between devices, Foam pairs well with GitHub . To publish your content, you can set it up to publish to GitHub Pages with zero code and zero config, or to any website hosting platform like Netlify or Vercel . Fun fact : This documentation was researched, written and published using Foam .","title":"What's in a Foam?"},{"location":"#getting-started","text":"\u26a0\ufe0f Foam is still in preview. Expect the experience to be a little rough. These instructions assume you have a GitHub account, and you have Visual Studio Code installed. Use the foam-template project to generate a new repository. If you're logged into GitHub, you can just hit this button: Use this template If you want to keep your thoughts to yourself, remember to set the repository private, or if you don't want to use GitHub to host your workspace at all, choose Download as ZIP instead of **Use this template* .* Clone the repository locally and open it in VS Code. Open the repository as a folder using the File > Open... menu item. In VS Code, \"open workspace\" refers to multi-root workspaces . When prompted to install recommended extensions, click Install all (or Show Recommendations if you want to review and install them one by one) After setting up the repository, open .vscode/settings.json and edit, add or remove any settings you'd like for your Foam workspace. To learn more about how to use Foam , read the recipes . Getting stuck in the setup? Read the frequently-asked-questions . There are known-issues , and I'm sure, many unknown issues! Please report them on GitHub !","title":"Getting started"},{"location":"#features","text":"Foam doesn't have features in the traditional sense. Out of the box, you have access to all features of VS Code and all the recommended-extensions you choose to install, but it's up to you to discover what you can do with it! Head over to recipes for some useful patterns and ideas!","title":"Features"},{"location":"#call-to-adventure","text":"The goal of Foam is to be your personal companion on your quest for knowledge. It's currently about \"10% ready\" relative to all the features I've thought of, but I've only thought of ~1% of the features it could have, and I'm excited to learn from others. I am using it as my personal thinking tool. By making it public, I hope to learn from others not only how to improve Foam, but also to improve how I learn and manage information. If that sounds like something you're interested in, I'd love to have you along on the journey. Check out roadmap to see what's in the plans Read about our principles to understand Foam's philosophy and direction Read the contribution-guide guide to learn how to participate. Feel free to open GitHub issues to give me feedback and ideas for new features.","title":"Call To Adventure"},{"location":"#thanks-and-attribution","text":"Foam is built by Jani Ev\u00e4kallio ( @jevakallio ), and all our contributors: Jani Ev\u00e4kallio \ud83d\udcbb \ud83d\udcd6 Joe Previte \ud83d\udcbb \ud83d\udcd6 Riccardo \ud83d\udcbb \ud83d\udcd6 Janne Ojanaho \ud83d\udcbb \ud83d\udcd6 Paul Shen \ud83d\udcd6 coffenbacher \ud83d\udcd6 Mathieu Dutour \ud83d\udcd6 Michael Hansen \ud83d\udcd6 David Nadlinger \ud83d\udcd6 Fernando \ud83d\udcd6 Juan Gonzalez \ud83d\udcd6 Louie Christie \ud83d\udcd6 Sandro \ud83d\udcd6 Simon Knott \ud83d\udcd6 Steven \ud83d\udcd6 Tim \ud83d\udcd6 Saurav Khdoolia \ud83d\udcd6 Ankit Tiwari \ud83d\udcd6 \u26a0\ufe0f \ud83d\udcbb Ayush Baweja \ud83d\udcd6 TaiChi-IO \ud83d\udcd6 Juan F Gonzalez \ud83d\udcd6 Sanket Dasgupta \ud83d\udcd6 Nicholas Stafie \ud83d\udcd6 Francis Hamel \ud83d\udcbb digiguru \ud83d\udcbb \ud83d\udcd6 CHIRAG SINGHAL \ud83d\udcbb Jonathan Carter \ud83d\udcd6 Julian Elve \ud83d\udcd6 Thomas Koppelaar \ud83d\udcac \ud83d\udcbb \ud83d\udcd3 Akshay \ud83d\udcbb John Lindquist \ud83d\udcd6 Ashwin Ramaswami \ud83d\udcd6 Claudio Canales \ud83d\udcd6 vitaly-pevgonen \ud83d\udcd6 Dmitry Shemetov \ud83d\udcd6 hooncp \ud83d\udcd6 Martin Laws \ud83d\udcd6 Sean K Smith \ud83d\udcbb Kevin Neely \ud83d\udcd6 Arief Rahmansyah \ud83d\udcd6 Vishesh Handa \ud83d\udcd6 Hitesh Kumar \ud83d\udcd6 Spencer Woo \ud83d\udcd6 Foam was inspired by Roam Research and the Zettelkasten methodology Foam wouldn't be possible without Visual Studio Code and GitHub , and relies heavily on our fantastic open source recommended-extensions and all their contributors!","title":"Thanks and attribution"},{"location":"#license","text":"Foam is licensed under the MIT license .","title":"License"},{"location":"backlinking/","text":"Backlinking # When using wiki-links , you can find all notes that link to a specific note in the VS Code Markdown Notes Backlinks Explorer Run Cmd + Shift + P ( Ctrl + Shift + P for Windows), type \"backlinks\" and run the Explorer: Focus on Backlinks view. Keep this pane always visible to discover relationships between your thoughts You can drag the backlinks pane to a different section in VS Code if you prefer. See: make-backlinks-more-prominent Finding backlinks in published Foam workspaces via materialized-backlinks is on the roadmap but not yet implemented.","title":"Backlinking"},{"location":"backlinking/#backlinking","text":"When using wiki-links , you can find all notes that link to a specific note in the VS Code Markdown Notes Backlinks Explorer Run Cmd + Shift + P ( Ctrl + Shift + P for Windows), type \"backlinks\" and run the Explorer: Focus on Backlinks view. Keep this pane always visible to discover relationships between your thoughts You can drag the backlinks pane to a different section in VS Code if you prefer. See: make-backlinks-more-prominent Finding backlinks in published Foam workspaces via materialized-backlinks is on the roadmap but not yet implemented.","title":"Backlinking"},{"location":"contribution-guide/","text":"Contribution Guide # todo good-first-task This contribution guide itself could be improved \ud83d\ude05 Foam is open to contributions of any kind, including but not limited to code, documentation, ideas, and feedback. Here are some general tips on how to get started on contributing to Foam: Use Foam for yourself, figure out what could be improved. Check out roadmap to see what's already in the plans. I have thoughts about how to implement some of these, but open to ideas and code contributions! Read about our principles to understand Foam's philosophy and direction Read and act in accordance with our code-of-conduct . Feel free to open GitHub issues to give me feedback and ideas for new features. Foam code and documentation live in the monorepo at foambubble/foam /docs : documentation and recipes /packages/foam-vscode : the core VSCode plugin /packages/foam-core : powers the core functionality in Foam across all platforms Exceptions to the monorepo are: The starter template at foambubble/foam-template All other recommended-extensions live in their respective GitHub repos. Contributing to the VS Code Extension # If you're interested in contributing to the VS Code extension (aka foam-vscode ), this guide will help you get things set up locally. Clone the repo locally: git clone https://github.com/foambubble/foam.git Install the necessary dependencies by running this command from the root: yarn install This project uses Yarn workspaces . foam-vscode relies on foam-core . This means we need to compile it before we do any extension development. From the root, run the command: yarn workspace foam-core build Now we'll use the launch configuration defined at .vscode/launch.json to start a new extension host of VS Code. From the root, or the foam-vscode workspace, press f5. In the new extension host of VS Code that launched, open a Foam workspace (e.g. your personal one, or a test-specific one created from foam-template). This is strictly not necessary, but the extension won't auto-run unless it's in a workspace with a .vscode/foam.json file. Test a command to make sure it's working as expected. Open the Command Palette (Ctrl/Cmd + Shift + P) and select \"Foam: Update Markdown Reference List\". If you see no errors, it's good to go! For more resources related to the VS Code Extension, check out the links below: tutorial-adding-a-new-command-to-the-vs-code-extension","title":"Contribution Guide"},{"location":"contribution-guide/#contribution-guide","text":"todo good-first-task This contribution guide itself could be improved \ud83d\ude05 Foam is open to contributions of any kind, including but not limited to code, documentation, ideas, and feedback. Here are some general tips on how to get started on contributing to Foam: Use Foam for yourself, figure out what could be improved. Check out roadmap to see what's already in the plans. I have thoughts about how to implement some of these, but open to ideas and code contributions! Read about our principles to understand Foam's philosophy and direction Read and act in accordance with our code-of-conduct . Feel free to open GitHub issues to give me feedback and ideas for new features. Foam code and documentation live in the monorepo at foambubble/foam /docs : documentation and recipes /packages/foam-vscode : the core VSCode plugin /packages/foam-core : powers the core functionality in Foam across all platforms Exceptions to the monorepo are: The starter template at foambubble/foam-template All other recommended-extensions live in their respective GitHub repos.","title":"Contribution Guide"},{"location":"contribution-guide/#contributing-to-the-vs-code-extension","text":"If you're interested in contributing to the VS Code extension (aka foam-vscode ), this guide will help you get things set up locally. Clone the repo locally: git clone https://github.com/foambubble/foam.git Install the necessary dependencies by running this command from the root: yarn install This project uses Yarn workspaces . foam-vscode relies on foam-core . This means we need to compile it before we do any extension development. From the root, run the command: yarn workspace foam-core build Now we'll use the launch configuration defined at .vscode/launch.json to start a new extension host of VS Code. From the root, or the foam-vscode workspace, press f5. In the new extension host of VS Code that launched, open a Foam workspace (e.g. your personal one, or a test-specific one created from foam-template). This is strictly not necessary, but the extension won't auto-run unless it's in a workspace with a .vscode/foam.json file. Test a command to make sure it's working as expected. Open the Command Palette (Ctrl/Cmd + Shift + P) and select \"Foam: Update Markdown Reference List\". If you see no errors, it's good to go! For more resources related to the VS Code Extension, check out the links below: tutorial-adding-a-new-command-to-the-vs-code-extension","title":"Contributing to the VS Code Extension"},{"location":"frequently-asked-questions/","text":"Frequently Asked Questions # \u26a0\ufe0f Foam is still in preview. Expect the experience to be a little rough. Frequently Asked Questions Links/Graphs/BackLinks don't work. How do I enable them? Links/Graphs/BackLinks don't work. How do I enable them? # Ensure that you have all the recommended-extensions installed in Visual Studio Code Reload Visual Studio Code by running Cmd + Shift + P ( Ctrl + Shift + P for Windows), type \"reload\" and run the Developer: Reload Window command to for the updated extensions take effect Check the formatting rules for links on foam-file-format , wiki-links and link-formatting-and-autocompletion","title":"Frequently Asked Questions"},{"location":"frequently-asked-questions/#frequently-asked-questions","text":"\u26a0\ufe0f Foam is still in preview. Expect the experience to be a little rough. Frequently Asked Questions Links/Graphs/BackLinks don't work. How do I enable them?","title":"Frequently Asked Questions"},{"location":"frequently-asked-questions/#linksgraphsbacklinks-dont-work-how-do-i-enable-them","text":"Ensure that you have all the recommended-extensions installed in Visual Studio Code Reload Visual Studio Code by running Cmd + Shift + P ( Ctrl + Shift + P for Windows), type \"reload\" and run the Developer: Reload Window command to for the updated extensions take effect Check the formatting rules for links on foam-file-format , wiki-links and link-formatting-and-autocompletion","title":"Links/Graphs/BackLinks don't work. How do I enable them?"},{"location":"katex-math-rendering/","text":"Katex Math Rendering # Apart from using the method mentioned in math-support , we can also use KaTeX to render our math equations in Foam. The caveat is: we can't rely on GitHub Pages to host and deploy our website anymore, because the plugin we'll be using to let Jekyll support KaTeX doesn't play well together with GitHub Pages. The alternative solution is to using vercel for building and publishing our website, so before you start integrating KaTeX into your Foam project, please follow the instructions to host your Foam workspace on vercel first. Adding required plugins # Add the plugin jekyll-katex to your Foam workspace's _config.yml and Gemfile if you haven't done so already. For detailed instructions, please refer to the #Adding a _config.yml and #Adding a Gemfile in vercel . Loading KaTeX JS and CSS # Because we are using KaTeX to render math, we will also need to import KaTeX's JS and CSS files from CDN. The official method to load these files is documented at: KaTeX/KaTeX#starter-template . In our case, we will need to add the following code snippet to our _layouts/page.html : <!-- _layouts/page.html --> --- layout: default --- < link rel = \"stylesheet\" href = \"https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.css\" integrity = \"sha384-AfEj0r4/OFrOo5t7NnNe46zW/tFgW6x/bCJG8FqQCEo3+Aro6EYUG4+cU+KJWu/X\" crossorigin = \"anonymous\" > <!-- The loading of KaTeX is deferred to speed up page rendering --> < script defer src = \"https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.js\" integrity = \"sha384-g7c+Jr9ZivxKLnZTDUhnkOnsh30B4H0rpLUpJ4jAIKs4fnJI+sEnkvrMWph2EDg4\" crossorigin = \"anonymous\" ></ script > <!-- To automatically render math in text elements, include the auto-render extension: --> < script defer src = \"https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/contrib/auto-render.min.js\" integrity = \"sha384-mll67QQFJfxn0IYznZYonOWZ644AWYC+Pt2cHqMaRhXVrursRwvLnLaebdGIlYNa\" crossorigin = \"anonymous\" onload = \"renderMathInElement(document.body);\" ></ script > <!-- ... --> Adding liquid tags to wrap page content # The plugin jekyll-katex focuses on rendering: Single math equations wrapped inside katex liquid tags like {% raw %} {% katex %} ... {% endkatex %} . Or multiple math equations in paragraphs wrapped inside {% raw %} {% katexmm %} ... {% endkatexmm %} . In our case, we'll be using the latter tag to wrap our {% raw %} {{ content }} . Wrap {% raw %} {{ content }} in the liquid tags inside _layouts/page.html like so: <!-- _layouts/page.html --> <!-- ... --> {% raw %}{% katexmm %} {{ content }} {% endkatexmm %}{% endraw %} <!-- ... --> Render equations in Foam's homepage as well # You may have noticed that we only made modifications to the template _layouts/page.html , which means that _layouts/home.html won't have KaTeX support. If you wan't to render math in Foam's home page, you'll need to make the same modifications to _layouts/home.html as well. Finally, if all goes well, then our site hosted on Vercel will support rendering math equations with KaTeX after commiting these changes to GitHub. Here's a demo of the default template with KaTeX support: Foam Template with KaTeX support .","title":"Katex Math Rendering"},{"location":"katex-math-rendering/#katex-math-rendering","text":"Apart from using the method mentioned in math-support , we can also use KaTeX to render our math equations in Foam. The caveat is: we can't rely on GitHub Pages to host and deploy our website anymore, because the plugin we'll be using to let Jekyll support KaTeX doesn't play well together with GitHub Pages. The alternative solution is to using vercel for building and publishing our website, so before you start integrating KaTeX into your Foam project, please follow the instructions to host your Foam workspace on vercel first.","title":"Katex Math Rendering"},{"location":"katex-math-rendering/#adding-required-plugins","text":"Add the plugin jekyll-katex to your Foam workspace's _config.yml and Gemfile if you haven't done so already. For detailed instructions, please refer to the #Adding a _config.yml and #Adding a Gemfile in vercel .","title":"Adding required plugins"},{"location":"katex-math-rendering/#loading-katex-js-and-css","text":"Because we are using KaTeX to render math, we will also need to import KaTeX's JS and CSS files from CDN. The official method to load these files is documented at: KaTeX/KaTeX#starter-template . In our case, we will need to add the following code snippet to our _layouts/page.html : <!-- _layouts/page.html --> --- layout: default --- < link rel = \"stylesheet\" href = \"https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.css\" integrity = \"sha384-AfEj0r4/OFrOo5t7NnNe46zW/tFgW6x/bCJG8FqQCEo3+Aro6EYUG4+cU+KJWu/X\" crossorigin = \"anonymous\" > <!-- The loading of KaTeX is deferred to speed up page rendering --> < script defer src = \"https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.js\" integrity = \"sha384-g7c+Jr9ZivxKLnZTDUhnkOnsh30B4H0rpLUpJ4jAIKs4fnJI+sEnkvrMWph2EDg4\" crossorigin = \"anonymous\" ></ script > <!-- To automatically render math in text elements, include the auto-render extension: --> < script defer src = \"https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/contrib/auto-render.min.js\" integrity = \"sha384-mll67QQFJfxn0IYznZYonOWZ644AWYC+Pt2cHqMaRhXVrursRwvLnLaebdGIlYNa\" crossorigin = \"anonymous\" onload = \"renderMathInElement(document.body);\" ></ script > <!-- ... -->","title":"Loading KaTeX JS and CSS"},{"location":"katex-math-rendering/#adding-liquid-tags-to-wrap-page-content","text":"The plugin jekyll-katex focuses on rendering: Single math equations wrapped inside katex liquid tags like {% raw %} {% katex %} ... {% endkatex %} . Or multiple math equations in paragraphs wrapped inside {% raw %} {% katexmm %} ... {% endkatexmm %} . In our case, we'll be using the latter tag to wrap our {% raw %} {{ content }} . Wrap {% raw %} {{ content }} in the liquid tags inside _layouts/page.html like so: <!-- _layouts/page.html --> <!-- ... --> {% raw %}{% katexmm %} {{ content }} {% endkatexmm %}{% endraw %} <!-- ... -->","title":"Adding liquid tags to wrap page content"},{"location":"katex-math-rendering/#render-equations-in-foams-homepage-as-well","text":"You may have noticed that we only made modifications to the template _layouts/page.html , which means that _layouts/home.html won't have KaTeX support. If you wan't to render math in Foam's home page, you'll need to make the same modifications to _layouts/home.html as well. Finally, if all goes well, then our site hosted on Vercel will support rendering math equations with KaTeX after commiting these changes to GitHub. Here's a demo of the default template with KaTeX support: Foam Template with KaTeX support .","title":"Render equations in Foam's homepage as well"},{"location":"note-macros/","text":"Custom Note Macros # This extension gives you the ability to create custom note macros. It was heavily inspired by Foam's daily-notes functionality. Installation # This extension is not included in the template To install search note-macros in vscode or head to note-macros - Visual Studio Marketplace Instructions # Run macro From command pallette # Simply use Ctrl+P or Alt+P depend on your os, and type Note Macros: Run A Macro then chose the macro you want to execute. Create Custom Note Macros # Create your own custom macros by adding them to your settings.json (Code|File > Preferences > User Settings). A full example can be found at settings.json For example: This macro creates a Weekly note in the Weekly note Directory. { \"note-macros\" : { \"Weekly\" : [ { \"type\" : \"note\" , \"directory\" : \"Weekly\" , \"extension\" : \".md\" , \"name\" : \"weekly-note\" , \"date\" : \"yyyy-W\" } ] } } For an explanation of the fields please go to note-macros - Explanation of Fields Add Keybindings to Run your Macros # in keybindings.json (Code|File > Preferences > Keyboard Shortcuts) add bindings to your macros: { \"key\" : \"ctrl+cmd+/\" , \"command\" : \"note-macros.Weekly\" } Issues and Feedback # If you have any issues or questions please look at the README.md on the note-macros GitHub. If you run into any issues that are not fixed by referring to the README or feature requests please open an issue .","title":"Custom Note Macros"},{"location":"note-macros/#custom-note-macros","text":"This extension gives you the ability to create custom note macros. It was heavily inspired by Foam's daily-notes functionality.","title":"Custom Note Macros"},{"location":"note-macros/#installation","text":"This extension is not included in the template To install search note-macros in vscode or head to note-macros - Visual Studio Marketplace","title":"Installation"},{"location":"note-macros/#instructions","text":"","title":"Instructions"},{"location":"note-macros/#run-macro-from-command-pallette","text":"Simply use Ctrl+P or Alt+P depend on your os, and type Note Macros: Run A Macro then chose the macro you want to execute.","title":"Run macro From command pallette"},{"location":"note-macros/#create-custom-note-macros","text":"Create your own custom macros by adding them to your settings.json (Code|File > Preferences > User Settings). A full example can be found at settings.json For example: This macro creates a Weekly note in the Weekly note Directory. { \"note-macros\" : { \"Weekly\" : [ { \"type\" : \"note\" , \"directory\" : \"Weekly\" , \"extension\" : \".md\" , \"name\" : \"weekly-note\" , \"date\" : \"yyyy-W\" } ] } } For an explanation of the fields please go to note-macros - Explanation of Fields","title":"Create Custom Note Macros"},{"location":"note-macros/#add-keybindings-to-run-your-macros","text":"in keybindings.json (Code|File > Preferences > Keyboard Shortcuts) add bindings to your macros: { \"key\" : \"ctrl+cmd+/\" , \"command\" : \"note-macros.Weekly\" }","title":"Add Keybindings to Run your Macros"},{"location":"note-macros/#issues-and-feedback","text":"If you have any issues or questions please look at the README.md on the note-macros GitHub. If you run into any issues that are not fixed by referring to the README or feature requests please open an issue .","title":"Issues and Feedback"},{"location":"principles/","text":"Principles # Table of Contents # Principles Table of Contents Foam enables you to do your best thinking Foam wants you to own your thoughts Foam helps you share your thoughts with the world. Foam allows people to collaborate in discovering better ways to work, together. Foam is for hackers, not only for programmers Foam enables you to do your best thinking # Foam works for you, you don't work for Foam. You should be able to focus on your work and not fight against Foam, or having to perform fiddly operations or maintenance jobs to keep Foam happy. Foam is not a package deal. You must be able to adopt only the parts of Foam that you want. There must be no tight coupling between Foam's features. Foam is a starting point You must be able to customise how foam looks and feels, and combine it with other tools you find helpful in your personal workflow. Foam is not a philosophy. Whether you use a methodology like Zettelkasten is up to you. You should be able to use Foam without joining a cult. Foam wants you to own your thoughts # Foam doesn't want your data. You can store your documents wherever you want. Some of Foam's suggested workflows include GitHub, if you don't want to use it to store your data, or you want to stop using it in the future, you should be able to migrate to alternative storage options. If you choose to not upload your notes to any cloud service or remote repository, remember to keep frequent local and occasional offsite backups of your data! Foam should not lock you in. Foam's content files, structure and metadata should be in interoperable format that supports migrating it to another tool if you prefer to. Users of Foam should be able to develop and share such tools freely. Foam should not leak your secrets. Nobody, including the developers of Foam, should have access to your personal knowledge graph unless you choose to give it to them. Foams should always be private by default, but easy to share if you choose to. Foam helps you share your thoughts with the world. # This principle may seem like it contradicts Foam wants you to own your thoughts , but it's actually a compatible corollary. You should be able to do both, because: [...] environments that build walls around good ideas tend to be less innovative in the long run than more open-ended environments. Good ideas may not want to be free, but they do want to connect, fuse, recombine. \u2014 Steven Johnson, Where Good Ideas Come From Foam should make it easy to publish your knowledge graph. With zero code, you should be able to make your graph public to the world. You should have full control over how it looks, feels, and where it's hosted. Foam should make it easy to collaborate on ideas. Foam should allow you to work closely together with your collaborators, and accept feedback, input and improvements from others. (Work in progress, see roadmap . Foam should make it easy to publish what you choose. Foam should double as a low-barrier blog/publishing platform, so you can share content to an audience without inviting them to intrude on your entire workspace. (Work in progress, see roadmap . Foam allows people to collaborate in discovering better ways to work, together. # Foam is a collection of ideas. Foam was released to the public not to share the few good ideas in it, but to learn many good ideas from others. As you improve your own workflow, share your work on your own Foam blog. Foam is open for contributions. If you use a tool or workflow that you like that fits these principles, please contribute them back to the Foam template as recipes , recommended-extensions or documentation in this workspace . See also: roadmap and contribution-guide . Foam is open source. Feel free to fork it, improve it and remix it. Just don't sell it, as per our license . Foam is not Roam. This project was inspired by Roam Research, but we're not limited by what Roam does. No idea is too big (though if it doesn't fit with Foam's core workflow, we might make it a recipes page instead). Foam is for hackers, not only for programmers # While Foam uses tools popular among computer programmers, Foam should be inclusive of everyone who wants to improve their own workflow to improve themselves. Foam embraces the hacker mindset. The target audience for Foam are people who look for creative ways to improve their ability to collect and organise information. Foam is not just for programmers. If you're a programmer, feel free to write scripts and extensions to support your own workflow, and publish them for others to use, but the out of the box Foam experience should not require you to know how to do so. You should, however, be curious and open to adopting new tools that are unfamiliar to you, and evaluate whether they could work for you. Foam is for everyone As a foam user, you support everyone's quest for knowledge and self-improvement, not only your own, or folks' who look like you. All participants in Foam repositories, discussion forums, physical and virtual meeting spaces etc are expected to respect each other as described in our code-of-conduct . Foam is not for toxic tech bros.","title":"Principles"},{"location":"principles/#principles","text":"","title":"Principles"},{"location":"principles/#table-of-contents","text":"Principles Table of Contents Foam enables you to do your best thinking Foam wants you to own your thoughts Foam helps you share your thoughts with the world. Foam allows people to collaborate in discovering better ways to work, together. Foam is for hackers, not only for programmers","title":"Table of Contents"},{"location":"principles/#foam-enables-you-to-do-your-best-thinking","text":"Foam works for you, you don't work for Foam. You should be able to focus on your work and not fight against Foam, or having to perform fiddly operations or maintenance jobs to keep Foam happy. Foam is not a package deal. You must be able to adopt only the parts of Foam that you want. There must be no tight coupling between Foam's features. Foam is a starting point You must be able to customise how foam looks and feels, and combine it with other tools you find helpful in your personal workflow. Foam is not a philosophy. Whether you use a methodology like Zettelkasten is up to you. You should be able to use Foam without joining a cult.","title":"Foam enables you to do your best thinking"},{"location":"principles/#foam-wants-you-to-own-your-thoughts","text":"Foam doesn't want your data. You can store your documents wherever you want. Some of Foam's suggested workflows include GitHub, if you don't want to use it to store your data, or you want to stop using it in the future, you should be able to migrate to alternative storage options. If you choose to not upload your notes to any cloud service or remote repository, remember to keep frequent local and occasional offsite backups of your data! Foam should not lock you in. Foam's content files, structure and metadata should be in interoperable format that supports migrating it to another tool if you prefer to. Users of Foam should be able to develop and share such tools freely. Foam should not leak your secrets. Nobody, including the developers of Foam, should have access to your personal knowledge graph unless you choose to give it to them. Foams should always be private by default, but easy to share if you choose to.","title":"Foam wants you to own your thoughts"},{"location":"principles/#foam-helps-you-share-your-thoughts-with-the-world","text":"This principle may seem like it contradicts Foam wants you to own your thoughts , but it's actually a compatible corollary. You should be able to do both, because: [...] environments that build walls around good ideas tend to be less innovative in the long run than more open-ended environments. Good ideas may not want to be free, but they do want to connect, fuse, recombine. \u2014 Steven Johnson, Where Good Ideas Come From Foam should make it easy to publish your knowledge graph. With zero code, you should be able to make your graph public to the world. You should have full control over how it looks, feels, and where it's hosted. Foam should make it easy to collaborate on ideas. Foam should allow you to work closely together with your collaborators, and accept feedback, input and improvements from others. (Work in progress, see roadmap . Foam should make it easy to publish what you choose. Foam should double as a low-barrier blog/publishing platform, so you can share content to an audience without inviting them to intrude on your entire workspace. (Work in progress, see roadmap .","title":"Foam helps you share your thoughts with the world."},{"location":"principles/#foam-allows-people-to-collaborate-in-discovering-better-ways-to-work-together","text":"Foam is a collection of ideas. Foam was released to the public not to share the few good ideas in it, but to learn many good ideas from others. As you improve your own workflow, share your work on your own Foam blog. Foam is open for contributions. If you use a tool or workflow that you like that fits these principles, please contribute them back to the Foam template as recipes , recommended-extensions or documentation in this workspace . See also: roadmap and contribution-guide . Foam is open source. Feel free to fork it, improve it and remix it. Just don't sell it, as per our license . Foam is not Roam. This project was inspired by Roam Research, but we're not limited by what Roam does. No idea is too big (though if it doesn't fit with Foam's core workflow, we might make it a recipes page instead).","title":"Foam allows people to collaborate in discovering better ways to work, together."},{"location":"principles/#foam-is-for-hackers-not-only-for-programmers","text":"While Foam uses tools popular among computer programmers, Foam should be inclusive of everyone who wants to improve their own workflow to improve themselves. Foam embraces the hacker mindset. The target audience for Foam are people who look for creative ways to improve their ability to collect and organise information. Foam is not just for programmers. If you're a programmer, feel free to write scripts and extensions to support your own workflow, and publish them for others to use, but the out of the box Foam experience should not require you to know how to do so. You should, however, be curious and open to adopting new tools that are unfamiliar to you, and evaluate whether they could work for you. Foam is for everyone As a foam user, you support everyone's quest for knowledge and self-improvement, not only your own, or folks' who look like you. All participants in Foam repositories, discussion forums, physical and virtual meeting spaces etc are expected to respect each other as described in our code-of-conduct . Foam is not for toxic tech bros.","title":"Foam is for hackers, not only for programmers"},{"location":"recipes/","text":"Recipes # Guides, tips and strategies for getting the most out of your Foam workspace! Contribute # Start by reading contribution-guide If you discover features not listed here, we'd love to have them! how-to-write-recipes . Take smart notes # Introduction to Zettelkasten todo Discover # Explore your notes using graph-visualisation Discover relationships with backlinking Simulating unlinked-references Organise # Using backlinking for reference-lists . Write # Link documents with wiki-links , using Foam's link-formatting-and-autocompletion . Use shortcuts for creating-new-notes Instantly create and access your daily-notes Use custom note-macros to create weekly, monthly etc. notes Draw diagrams-in-markdown Prettify your links, automatically-expand-urls-to-well-titled-links Style your environment with custom-markdown-preview-styles Paste and link images-from-your-clipboard shows-image-preview-on-hover Markdown All-in-One features todo good-first-task Manage checklists Automatic Table of Contents Live preview markdown More... VS Code Advanced Features todo good-first-task Focus with Zen Mode Version control # Quick commits with VS Code's built in git-integration Store your workspace in an auto-synced GitHub repo with gistpad Sync your GitHub repo automatically todo . Publish # Publish to github-pages Publish to gitlab-pages Publish to gitee-pages Publish your site with eleventy-and-netlify Publish to azure-devops-wiki Publish to vercel Make the site your own by customising-styles . Render math symbols, by either adding client-side math-support to the default github-pages site adding a custom Jekyll plugin to support katex-math-rendering Collaborate # Give your team push access to your GitHub repo todo Real-time collaboration via VS Code Live Share todo Accept patches via GitHub PRs todo Workflow # Capture notes from Drafts app on iOS capture-notes-with-drafts-pro Creative ideas # Creative ideas welcome! Support Anki cards from notes like Remnote todo See contribution-guide and how-to-write-recipes . Other # Thought of a recipe but don't see a category for them? Add them here and we'll organise them once we detect a theme. See contribution-guide and how-to-write-recipes .","title":"Recipes"},{"location":"recipes/#recipes","text":"Guides, tips and strategies for getting the most out of your Foam workspace!","title":"Recipes"},{"location":"recipes/#contribute","text":"Start by reading contribution-guide If you discover features not listed here, we'd love to have them! how-to-write-recipes .","title":"Contribute"},{"location":"recipes/#take-smart-notes","text":"Introduction to Zettelkasten todo","title":"Take smart notes"},{"location":"recipes/#discover","text":"Explore your notes using graph-visualisation Discover relationships with backlinking Simulating unlinked-references","title":"Discover"},{"location":"recipes/#organise","text":"Using backlinking for reference-lists .","title":"Organise"},{"location":"recipes/#write","text":"Link documents with wiki-links , using Foam's link-formatting-and-autocompletion . Use shortcuts for creating-new-notes Instantly create and access your daily-notes Use custom note-macros to create weekly, monthly etc. notes Draw diagrams-in-markdown Prettify your links, automatically-expand-urls-to-well-titled-links Style your environment with custom-markdown-preview-styles Paste and link images-from-your-clipboard shows-image-preview-on-hover Markdown All-in-One features todo good-first-task Manage checklists Automatic Table of Contents Live preview markdown More... VS Code Advanced Features todo good-first-task Focus with Zen Mode","title":"Write"},{"location":"recipes/#version-control","text":"Quick commits with VS Code's built in git-integration Store your workspace in an auto-synced GitHub repo with gistpad Sync your GitHub repo automatically todo .","title":"Version control"},{"location":"recipes/#publish","text":"Publish to github-pages Publish to gitlab-pages Publish to gitee-pages Publish your site with eleventy-and-netlify Publish to azure-devops-wiki Publish to vercel Make the site your own by customising-styles . Render math symbols, by either adding client-side math-support to the default github-pages site adding a custom Jekyll plugin to support katex-math-rendering","title":"Publish"},{"location":"recipes/#collaborate","text":"Give your team push access to your GitHub repo todo Real-time collaboration via VS Code Live Share todo Accept patches via GitHub PRs todo","title":"Collaborate"},{"location":"recipes/#workflow","text":"Capture notes from Drafts app on iOS capture-notes-with-drafts-pro","title":"Workflow"},{"location":"recipes/#creative-ideas","text":"Creative ideas welcome! Support Anki cards from notes like Remnote todo See contribution-guide and how-to-write-recipes .","title":"Creative ideas"},{"location":"recipes/#other","text":"Thought of a recipe but don't see a category for them? Add them here and we'll organise them once we detect a theme. See contribution-guide and how-to-write-recipes .","title":"Other"},{"location":"recommended-extensions/","text":"Recommended Extensions # These extensions defined in .vscode/extensions.json are automatically installed when you accept the workspace's recommended extensions. This list is subject to change. Especially the Git ones. Foam for VSCode (alpha) Markdown Notes Markdown Links Markdown All In One Git Lens","title":"Recommended Extensions"},{"location":"recommended-extensions/#recommended-extensions","text":"These extensions defined in .vscode/extensions.json are automatically installed when you accept the workspace's recommended extensions. This list is subject to change. Especially the Git ones. Foam for VSCode (alpha) Markdown Notes Markdown Links Markdown All In One Git Lens","title":"Recommended Extensions"},{"location":"roadmap/","text":"Roadmap # Some of these items can be achieved by combining existing tools, but others may require us to build bespoke software solutions. See build-vs-assemble to understand trade-offs between these approaches. If a feature can be implemented by contributing to recipes , it should. In progress # Items that are already being worked on. Roadmap items in this stage should have an owner. @jevakallio : cli High priority # Items we plan on working next. Items in this stage don't need to have an owner, but before we start working on them should have enough specification that they can be picked up and worked on without having to seek consensus. If you want to pick up work in this category, you should have a plan on how long the implementation will approximately take so we don't block progress by sitting on high priority issues. workspace-janitor Backlog # Everything else, categorised into themes. Just because something is on this list doesn't mean it'll get done. If you're interested in working on items in this category, check the contribution-guide for how to get started. If a roadmap item is a stub, consider opening a GitHub issue to start a conversation to avoid situations where the implementation does not fit long term vision and roadmap. Note that this is optional. The only centralised governance in Foam is to decide what ends up in the official template , documentation and extension . You are free to build whatever you want for yourself, and we'd love if you shared it with us, but you are by no means obligated to do so! When creating GitHub issues to discuss roadmap items, link them here. Known issues # improve-default-workspace-settings Improve git-integration Fix wiki-links compatibility issues Simplify foam-file-format Core features # renaming-files unlinked-references block-references improved-backlinking UX: make-backlinks-more-prominent materialized-backlinks automatic-git-syncing git-flows-for-teams user-settings link-reference-definitions predefined-user-snippets Publishing # officially-support-alternative-templates improved-static-site-generation mdx-by-default search-in-published-workspace graph-in-published-workspace Discussion: foam#58 linking-between-published-workspaces Discussion: foam#59 publishing-permissions Platforms # cli mobile-apps packaged-desktop-app web-editor Migration # The community is working on a number of automated scripts to help you migrate to Foam. The main work of developing such a method involves exporting your notes, converting them to the Markdown format, and then making sure that the links between notes (if you had those) still work. migrating-from-roam Discussion: foam#55 migrating-from-obsidian Discussion: foam#46 migrating-from-onenote Discussion: foam#151 Migration from other tools... Integration # Integrations to third party tools ... Wild ideas # foam-linter refactoring-via-language-server-protocol","title":"Roadmap"},{"location":"roadmap/#roadmap","text":"Some of these items can be achieved by combining existing tools, but others may require us to build bespoke software solutions. See build-vs-assemble to understand trade-offs between these approaches. If a feature can be implemented by contributing to recipes , it should.","title":"Roadmap"},{"location":"roadmap/#in-progress","text":"Items that are already being worked on. Roadmap items in this stage should have an owner. @jevakallio : cli","title":"In progress"},{"location":"roadmap/#high-priority","text":"Items we plan on working next. Items in this stage don't need to have an owner, but before we start working on them should have enough specification that they can be picked up and worked on without having to seek consensus. If you want to pick up work in this category, you should have a plan on how long the implementation will approximately take so we don't block progress by sitting on high priority issues. workspace-janitor","title":"High priority"},{"location":"roadmap/#backlog","text":"Everything else, categorised into themes. Just because something is on this list doesn't mean it'll get done. If you're interested in working on items in this category, check the contribution-guide for how to get started. If a roadmap item is a stub, consider opening a GitHub issue to start a conversation to avoid situations where the implementation does not fit long term vision and roadmap. Note that this is optional. The only centralised governance in Foam is to decide what ends up in the official template , documentation and extension . You are free to build whatever you want for yourself, and we'd love if you shared it with us, but you are by no means obligated to do so! When creating GitHub issues to discuss roadmap items, link them here.","title":"Backlog"},{"location":"roadmap/#known-issues","text":"improve-default-workspace-settings Improve git-integration Fix wiki-links compatibility issues Simplify foam-file-format","title":"Known issues"},{"location":"roadmap/#core-features","text":"renaming-files unlinked-references block-references improved-backlinking UX: make-backlinks-more-prominent materialized-backlinks automatic-git-syncing git-flows-for-teams user-settings link-reference-definitions predefined-user-snippets","title":"Core features"},{"location":"roadmap/#publishing","text":"officially-support-alternative-templates improved-static-site-generation mdx-by-default search-in-published-workspace graph-in-published-workspace Discussion: foam#58 linking-between-published-workspaces Discussion: foam#59 publishing-permissions","title":"Publishing"},{"location":"roadmap/#platforms","text":"cli mobile-apps packaged-desktop-app web-editor","title":"Platforms"},{"location":"roadmap/#migration","text":"The community is working on a number of automated scripts to help you migrate to Foam. The main work of developing such a method involves exporting your notes, converting them to the Markdown format, and then making sure that the links between notes (if you had those) still work. migrating-from-roam Discussion: foam#55 migrating-from-obsidian Discussion: foam#46 migrating-from-onenote Discussion: foam#151 Migration from other tools...","title":"Migration"},{"location":"roadmap/#integration","text":"Integrations to third party tools ...","title":"Integration"},{"location":"roadmap/#wild-ideas","text":"foam-linter refactoring-via-language-server-protocol","title":"Wild ideas"},{"location":"vercel/","text":"Vercel # Vercel is a static website hosting solution similar to github-pages . This recipe shows you how to deploy the default Foam website template to Vercel. Setting up the project # Using Foam's template # Generate a GitHub repository using the default Foam template , this will be the workspace that we will be deploying with Vercel. This workspace is a barebone Jekyll source website, which means we can customize and install plugins just like any other Jekyll websites. As we won't be using GitHub Pages, we will be adding a few configuration files in order to help Vercel pick up on how to build our site. Adding a _config.yml # First, we'll need to add a _config.yml at the root directory. This is the Jekyll configuration file. In here, we will set the site's title, theme, repository and permalink options, and also tell Jekyll what plugins to use: # _config.yml title : Foam # All the plugins we will be installing now that we won't be using GitHub Pages plugins : - jekyll-katex # optional - jekyll-default-layout - jekyll-relative-links - jekyll-readme-index - jekyll-titles-from-headings - jekyll-optional-front-matter # The default Jekyll theme we will be using theme : jekyll-theme-primer # The GitHub repository that we are hosting our foam workspace from repository : user/repo # Generate permalinks in format specified in: https://jekyllrb.com/docs/permalinks/#built-in-formats permalink : pretty The theme specifies a theme for our deployed Jekyll website. The default GitHub Pages template is called Primer . See Primer docs for how to customise html layouts and templates. We can also choose a theme if you want from places like Jekyll Themes . The plugins specifies a list of Jekyll plugins that we will be installing in the next section. As we won't be using GitHub Pages, we'll need to install these plugins that GitHub Pages installs for us under the hood. If you want to use LaTeX rendered with KaTeX (which is what the plugin jekyll-katex does), you can specify it here. And yes, one of the benefits of deploying with Vercel is that we can use KaTeX to render LaTeX! More on: katex-math-rendering Adding a Gemfile # Next up, we'll create another new file called Gemfile in the root directory. This is where we will let Vercel know what plugins to install when building our website. In our Gemfile , we need to specify our Ruby packages: # Gemfile source \"https://rubygems.org\" gem \"jekyll\" gem \"kramdown-parser-gfm\" gem \"jekyll-theme-primer\" gem \"jekyll-optional-front-matter\" gem \"jekyll-default-layout\" gem \"jekyll-relative-links\" gem \"jekyll-readme-index\" gem \"jekyll-titles-from-headings\" gem \"jekyll-katex\" # Optional, the package that enables KaTeX math rendering Enable math rendering with KaTeX (optional) # Besides adding the plugin jekyll-katex in _config.yml and Gemfile , we'll also have to follow the guides in katex-math-rendering to let our site fully support using KaTeX to render math equations. Commiting changes to GitHub repo # Finally, commit the newly created files to GitHub. Importing project to Vercel # First, import our foam workspace (GitHub repository) to Vercel with Vercel's Import Git Repository . Paste our GitHub repo's url and Vercel will automatically pull and analyze the tool we use to deploy our website. (In our case: Jekyll.) Next, select the folder to deploy from if prompted. If we are using the default template, then Vercel will default to the root directory of our Foam workspace. Finally, if all is successful, Vercel will show the detected framework: Jekyll. Press Deploy to proceed on publishing our project. And now, Vercel will take care of building and rendering our foam workspace each time on push. Vercel will publish our site to xxx.vercel.app , we can also define a custom domain name for our Vercel website.","title":"Vercel"},{"location":"vercel/#vercel","text":"Vercel is a static website hosting solution similar to github-pages . This recipe shows you how to deploy the default Foam website template to Vercel.","title":"Vercel"},{"location":"vercel/#setting-up-the-project","text":"","title":"Setting up the project"},{"location":"vercel/#using-foams-template","text":"Generate a GitHub repository using the default Foam template , this will be the workspace that we will be deploying with Vercel. This workspace is a barebone Jekyll source website, which means we can customize and install plugins just like any other Jekyll websites. As we won't be using GitHub Pages, we will be adding a few configuration files in order to help Vercel pick up on how to build our site.","title":"Using Foam's template"},{"location":"vercel/#adding-a-_configyml","text":"First, we'll need to add a _config.yml at the root directory. This is the Jekyll configuration file. In here, we will set the site's title, theme, repository and permalink options, and also tell Jekyll what plugins to use: # _config.yml title : Foam # All the plugins we will be installing now that we won't be using GitHub Pages plugins : - jekyll-katex # optional - jekyll-default-layout - jekyll-relative-links - jekyll-readme-index - jekyll-titles-from-headings - jekyll-optional-front-matter # The default Jekyll theme we will be using theme : jekyll-theme-primer # The GitHub repository that we are hosting our foam workspace from repository : user/repo # Generate permalinks in format specified in: https://jekyllrb.com/docs/permalinks/#built-in-formats permalink : pretty The theme specifies a theme for our deployed Jekyll website. The default GitHub Pages template is called Primer . See Primer docs for how to customise html layouts and templates. We can also choose a theme if you want from places like Jekyll Themes . The plugins specifies a list of Jekyll plugins that we will be installing in the next section. As we won't be using GitHub Pages, we'll need to install these plugins that GitHub Pages installs for us under the hood. If you want to use LaTeX rendered with KaTeX (which is what the plugin jekyll-katex does), you can specify it here. And yes, one of the benefits of deploying with Vercel is that we can use KaTeX to render LaTeX! More on: katex-math-rendering","title":"Adding a _config.yml"},{"location":"vercel/#adding-a-gemfile","text":"Next up, we'll create another new file called Gemfile in the root directory. This is where we will let Vercel know what plugins to install when building our website. In our Gemfile , we need to specify our Ruby packages: # Gemfile source \"https://rubygems.org\" gem \"jekyll\" gem \"kramdown-parser-gfm\" gem \"jekyll-theme-primer\" gem \"jekyll-optional-front-matter\" gem \"jekyll-default-layout\" gem \"jekyll-relative-links\" gem \"jekyll-readme-index\" gem \"jekyll-titles-from-headings\" gem \"jekyll-katex\" # Optional, the package that enables KaTeX math rendering","title":"Adding a Gemfile"},{"location":"vercel/#enable-math-rendering-with-katex-optional","text":"Besides adding the plugin jekyll-katex in _config.yml and Gemfile , we'll also have to follow the guides in katex-math-rendering to let our site fully support using KaTeX to render math equations.","title":"Enable math rendering with KaTeX (optional)"},{"location":"vercel/#commiting-changes-to-github-repo","text":"Finally, commit the newly created files to GitHub.","title":"Commiting changes to GitHub repo"},{"location":"vercel/#importing-project-to-vercel","text":"First, import our foam workspace (GitHub repository) to Vercel with Vercel's Import Git Repository . Paste our GitHub repo's url and Vercel will automatically pull and analyze the tool we use to deploy our website. (In our case: Jekyll.) Next, select the folder to deploy from if prompted. If we are using the default template, then Vercel will default to the root directory of our Foam workspace. Finally, if all is successful, Vercel will show the detected framework: Jekyll. Press Deploy to proceed on publishing our project. And now, Vercel will take care of building and rendering our foam workspace each time on push. Vercel will publish our site to xxx.vercel.app , we can also define a custom domain name for our Vercel website.","title":"Importing project to Vercel"},{"location":"wiki-links/","text":"Wiki Links # Foam enables you to Link pages together using [[file-name]] annotations (i.e. [[media-wiki]] links). Type [[ and start typing a file name for autocompletion. Note that your file names should be in lower-dash-case.md , and your wiki links should reference file names exactly: [[lower-dash-case]] , not [[Lower Dash Case]] . See link-formatting-and-autocompletion for more information, and how to setup your link autocompletions to make this easier. Cmd + Click ( Ctrl + Click on Windows ) on file name to navigate to file ( F12 also works while your cursor is on the file name) Cmd + Click ( Ctrl + Click on Windows ) on non-existent file to create that file in the workspace. If the F12 shortcut feels unnatural you can rebind it at File > Preferences > Keyboard Shortcuts by searching for editor.action.revealDefinition . Required extensions # Markdown Notes (core functionality) Foam for VSCode (for Markdown compatibility) Markdown compatibility # The Foam for VSCode extension automatically generates link-reference-definitions at the bottom of the file to make wiki-links compatible with Markdown tools and parsers. Read more # foam-file-format link-formatting-and-autocompletion See link-reference-definition-improvements for further discussion on current problems and potential solutions.","title":"Wiki Links"},{"location":"wiki-links/#wiki-links","text":"Foam enables you to Link pages together using [[file-name]] annotations (i.e. [[media-wiki]] links). Type [[ and start typing a file name for autocompletion. Note that your file names should be in lower-dash-case.md , and your wiki links should reference file names exactly: [[lower-dash-case]] , not [[Lower Dash Case]] . See link-formatting-and-autocompletion for more information, and how to setup your link autocompletions to make this easier. Cmd + Click ( Ctrl + Click on Windows ) on file name to navigate to file ( F12 also works while your cursor is on the file name) Cmd + Click ( Ctrl + Click on Windows ) on non-existent file to create that file in the workspace. If the F12 shortcut feels unnatural you can rebind it at File > Preferences > Keyboard Shortcuts by searching for editor.action.revealDefinition .","title":"Wiki Links"},{"location":"wiki-links/#required-extensions","text":"Markdown Notes (core functionality) Foam for VSCode (for Markdown compatibility)","title":"Required extensions"},{"location":"wiki-links/#markdown-compatibility","text":"The Foam for VSCode extension automatically generates link-reference-definitions at the bottom of the file to make wiki-links compatible with Markdown tools and parsers.","title":"Markdown compatibility"},{"location":"wiki-links/#read-more","text":"foam-file-format link-formatting-and-autocompletion See link-reference-definition-improvements for further discussion on current problems and potential solutions.","title":"Read more"},{"location":"meeting-notes/foam-core-2020-07-11/","text":"Foam Core 2020-07-11 # Present: @jevakallio, @riccardoferretti Tests # How do we know this approach works? Supports renaming Supports searching with (attribute-x) Find dead links Getting started # Land work to master Create a foam-core package - Open questions # How should writing to files work What if affected notes have unsaved changes Graph methods # get all search by tag free text todo : how do vs code search editors work? are they pluggable? what do they need? find dead links for linters serialize/toJSON (for visualizers) subscribe to changes find if a link exists (and which link) in a given row / column position + return it's start and end position - this would probably be needed e.g. to CTRL-hovering to work properly Node methods # rename node and all links to that node get links forward links (for link lists) backlinks (with surrounding context) Node definition # What do we need the node (and edge metadata) to contain: id : tbd should be unique, needs some kind of unique gen function should be reconstructable even if links are not updated every time what happens during rename? is reparenting the graph going to be hard? do id's need to be persistent, or can we create them per in-memory session, keep them stable despite renames, and then next session generate a new id? Ideally should be a path to file, so it's easy to look up from the graph by id for renaming type : Note | Image | etc title : can be read from markdown title or frontmatter metadata path : full path to file, relative to workspace (graph) root links : id : File to link to text : The link label type markdown | mediawiki | image | http section : : Anchor link to a heading in target note, if we want to add support for linking to sections block (ref) Positional data from AST? tags Markdown layer # source : raw markdown (rename?) ast : raw markdown ast checksum : if we do caching Link text # // some-file.md // # Some File Write -> Store on disk [[Some File]] -> Some File Editing Some File On disk (could be solved by migration) [[some-file]] [[Some File]] docs/index.md -> Index notes/index.md -> Index Index notes/index.md Index docs/index.md [[Some File | path/to/some-file.md]] Do we apply any constraints: [[file-name-without-extension]] [[file-name-with-extension.md]] [[Title Cased File Name]] Not supported by Markdown Notes: [[path/to/file-name.md]] - Just use markdown links [[Target Note Title]] Issues: Name clashes in directories Name clashes between extensions Renaming Change filename/title needs to reflect everywhere Orphaning If we can't rely on in-memory process to rename things correctly while changes happen (e.g. file is renamed, moved, deleted, or titled) Solving this issue is necessarily heuristic. We could try to write smart solutions, plus a linter for orphans How others solve this: Unique ids -- could support optionally as part of file name or front matter metadata. Should not be required.","title":"Foam Core 2020-07-11"},{"location":"meeting-notes/foam-core-2020-07-11/#foam-core-2020-07-11","text":"Present: @jevakallio, @riccardoferretti","title":"Foam Core 2020-07-11"},{"location":"meeting-notes/foam-core-2020-07-11/#tests","text":"How do we know this approach works? Supports renaming Supports searching with (attribute-x) Find dead links","title":"Tests"},{"location":"meeting-notes/foam-core-2020-07-11/#getting-started","text":"Land work to master Create a foam-core package -","title":"Getting started"},{"location":"meeting-notes/foam-core-2020-07-11/#open-questions","text":"How should writing to files work What if affected notes have unsaved changes","title":"Open questions"},{"location":"meeting-notes/foam-core-2020-07-11/#graph-methods","text":"get all search by tag free text todo : how do vs code search editors work? are they pluggable? what do they need? find dead links for linters serialize/toJSON (for visualizers) subscribe to changes find if a link exists (and which link) in a given row / column position + return it's start and end position - this would probably be needed e.g. to CTRL-hovering to work properly","title":"Graph methods"},{"location":"meeting-notes/foam-core-2020-07-11/#node-methods","text":"rename node and all links to that node get links forward links (for link lists) backlinks (with surrounding context)","title":"Node methods"},{"location":"meeting-notes/foam-core-2020-07-11/#node-definition","text":"What do we need the node (and edge metadata) to contain: id : tbd should be unique, needs some kind of unique gen function should be reconstructable even if links are not updated every time what happens during rename? is reparenting the graph going to be hard? do id's need to be persistent, or can we create them per in-memory session, keep them stable despite renames, and then next session generate a new id? Ideally should be a path to file, so it's easy to look up from the graph by id for renaming type : Note | Image | etc title : can be read from markdown title or frontmatter metadata path : full path to file, relative to workspace (graph) root links : id : File to link to text : The link label type markdown | mediawiki | image | http section : : Anchor link to a heading in target note, if we want to add support for linking to sections block (ref) Positional data from AST? tags","title":"Node definition"},{"location":"meeting-notes/foam-core-2020-07-11/#markdown-layer","text":"source : raw markdown (rename?) ast : raw markdown ast checksum : if we do caching","title":"Markdown layer"},{"location":"meeting-notes/foam-core-2020-07-11/#link-text","text":"// some-file.md // # Some File Write -> Store on disk [[Some File]] -> Some File Editing Some File On disk (could be solved by migration) [[some-file]] [[Some File]] docs/index.md -> Index notes/index.md -> Index Index notes/index.md Index docs/index.md [[Some File | path/to/some-file.md]] Do we apply any constraints: [[file-name-without-extension]] [[file-name-with-extension.md]] [[Title Cased File Name]] Not supported by Markdown Notes: [[path/to/file-name.md]] - Just use markdown links [[Target Note Title]] Issues: Name clashes in directories Name clashes between extensions Renaming Change filename/title needs to reflect everywhere Orphaning If we can't rely on in-memory process to rename things correctly while changes happen (e.g. file is renamed, moved, deleted, or titled) Solving this issue is necessarily heuristic. We could try to write smart solutions, plus a linter for orphans How others solve this: Unique ids -- could support optionally as part of file name or front matter metadata. Should not be required.","title":"Link text"},{"location":"migrate/migrating-from-obsidian/","text":"Migrating from Obsidian (stub) # todo This roadmap item needs more specification work. If you're interested in working on it, please start a conversation in GitHub issues .","title":"Migrating from Obsidian (stub)"},{"location":"migrate/migrating-from-obsidian/#migrating-from-obsidian-stub","text":"todo This roadmap item needs more specification work. If you're interested in working on it, please start a conversation in GitHub issues .","title":"Migrating from Obsidian (stub)"},{"location":"migrate/migrating-from-onenote/","text":"Migrating from OneNote # This guide mostly duplicates the instructions at the repo for the PowerShell script . Summary # The powershell script 'ConvertOneNote2MarkDown-v2.ps1' will utilize the OneNote Object Model on your workstation to convert all OneNote pages to Word documents and then utilizes PanDoc to convert the Word documents to Markdown (.md) format. It will also: Create a folder structure for your Notebooks and Sections. Process pages that are in sections at the Notebook, Section Group and 1 st Nested Section Group levels. Allow you you choose between putting all Images in a central '/media' folder for each notebook, or in a separate '/media' folder in each folder of the hierarchy. Fix image references in the resulting .md files, generating relative references to the image files within the markdown document. A title, description, and date header will be added to each file as well. And more (see details at repo)! Usage # Start the OneNote application. All notebooks currently loaded in OneNote will be converted. It is advised that you install Onetastic and the attached macro, which will automatically expand any collapsed paragraphs in the notebook. They won't be exported otherwise. To install the macro, click the New Macro Button within the Onetastic Toolbar and then select File -> Import and select the .xml macro included in the release. Run the macro for each Notebook that is open For the next sections, it is highly recommended that you use VS Code, and its embedded PowerShell terminal, as this allows you to edit and run the script, as well as check the results of the .md output all in one window. Whatever you choose, you will need to do the following: Clone the script to your computer (see here , if you're unfamiliar with git). Once cloned, navigate to the repo folder. In VS Code, use File -> Add Folder to Workspace, right click on the folder in the left side bar and click Open In Integrated Terminal . Run the script by executing .\\ConvertOnenote2Markdown-v2 if you receive an error, try running this line to bypass security: Set-ExecutionPolicy Bypass -Scope Process if you still have trouble, try running both Onenote and Powershell as an administrator. It will ask you for the path to store the markdown folder structure. Please use an empty folder. If using VS Code, you might not be able to paste the filepath - right click on the blinking cursor and it will paste from clipboard. Attention: use a full absolute path for the destination. Read the prompts carefully to select your desired options. If you aren't actively editing your pages in Onenote, it is HIGHLY recommended that you don't delete the intermediate word docs, as they take 80+% of the time to generate. They are stored in their own folder, out of the way. You can then quickly re-run the script with different parameters until you find what you like. Sit back and wait until the process completes. To stop the process at any time, press Ctrl+C. If you like, you can inspect some of the .md files prior to completion. If you're not happy with the results, stop the process, delete the .md and re-run with different parameters. At this point, you should be ready to load the new directory into Foam!","title":"Migrating from OneNote"},{"location":"migrate/migrating-from-onenote/#migrating-from-onenote","text":"This guide mostly duplicates the instructions at the repo for the PowerShell script .","title":"Migrating from OneNote"},{"location":"migrate/migrating-from-onenote/#summary","text":"The powershell script 'ConvertOneNote2MarkDown-v2.ps1' will utilize the OneNote Object Model on your workstation to convert all OneNote pages to Word documents and then utilizes PanDoc to convert the Word documents to Markdown (.md) format. It will also: Create a folder structure for your Notebooks and Sections. Process pages that are in sections at the Notebook, Section Group and 1 st Nested Section Group levels. Allow you you choose between putting all Images in a central '/media' folder for each notebook, or in a separate '/media' folder in each folder of the hierarchy. Fix image references in the resulting .md files, generating relative references to the image files within the markdown document. A title, description, and date header will be added to each file as well. And more (see details at repo)!","title":"Summary"},{"location":"migrate/migrating-from-onenote/#usage","text":"Start the OneNote application. All notebooks currently loaded in OneNote will be converted. It is advised that you install Onetastic and the attached macro, which will automatically expand any collapsed paragraphs in the notebook. They won't be exported otherwise. To install the macro, click the New Macro Button within the Onetastic Toolbar and then select File -> Import and select the .xml macro included in the release. Run the macro for each Notebook that is open For the next sections, it is highly recommended that you use VS Code, and its embedded PowerShell terminal, as this allows you to edit and run the script, as well as check the results of the .md output all in one window. Whatever you choose, you will need to do the following: Clone the script to your computer (see here , if you're unfamiliar with git). Once cloned, navigate to the repo folder. In VS Code, use File -> Add Folder to Workspace, right click on the folder in the left side bar and click Open In Integrated Terminal . Run the script by executing .\\ConvertOnenote2Markdown-v2 if you receive an error, try running this line to bypass security: Set-ExecutionPolicy Bypass -Scope Process if you still have trouble, try running both Onenote and Powershell as an administrator. It will ask you for the path to store the markdown folder structure. Please use an empty folder. If using VS Code, you might not be able to paste the filepath - right click on the blinking cursor and it will paste from clipboard. Attention: use a full absolute path for the destination. Read the prompts carefully to select your desired options. If you aren't actively editing your pages in Onenote, it is HIGHLY recommended that you don't delete the intermediate word docs, as they take 80+% of the time to generate. They are stored in their own folder, out of the way. You can then quickly re-run the script with different parameters until you find what you like. Sit back and wait until the process completes. To stop the process at any time, press Ctrl+C. If you like, you can inspect some of the .md files prior to completion. If you're not happy with the results, stop the process, delete the .md and re-run with different parameters. At this point, you should be ready to load the new directory into Foam!","title":"Usage"},{"location":"migrate/migrating-from-roam/","text":"Migrating from Roam (stub) # todo This roadmap item needs more specification work. If you're interested in working on it, please start a conversation in GitHub issues .","title":"Migrating from Roam (stub)"},{"location":"migrate/migrating-from-roam/#migrating-from-roam-stub","text":"todo This roadmap item needs more specification work. If you're interested in working on it, please start a conversation in GitHub issues .","title":"Migrating from Roam (stub)"},{"location":"recipes/automatically-expand-urls-to-well-titled-links/","text":"Automatically Expand URLs to Well-Titled Links # Convert a link to a fully-formed Markdown link, using the page's title as a display name. Useful for citations and creating link collections. Required Extensions # Markdown Link Expander (not included in template) Markdown Link Expander will scrape your URL's <title> tag to create a nice Markdown-style link. Instructions # Highlight desired URL Cmd + Shift + P Expand URL to Markdown Profit Tip: If you paste a lot of links, give the action a custom key binding Feedback and issues # Have an idea for the extension? Feel free to share! \ud83c\udf89","title":"Automatically Expand URLs to Well-Titled Links"},{"location":"recipes/automatically-expand-urls-to-well-titled-links/#automatically-expand-urls-to-well-titled-links","text":"Convert a link to a fully-formed Markdown link, using the page's title as a display name. Useful for citations and creating link collections.","title":"Automatically Expand URLs to Well-Titled Links"},{"location":"recipes/automatically-expand-urls-to-well-titled-links/#required-extensions","text":"Markdown Link Expander (not included in template) Markdown Link Expander will scrape your URL's <title> tag to create a nice Markdown-style link.","title":"Required Extensions"},{"location":"recipes/automatically-expand-urls-to-well-titled-links/#instructions","text":"Highlight desired URL Cmd + Shift + P Expand URL to Markdown Profit Tip: If you paste a lot of links, give the action a custom key binding","title":"Instructions"},{"location":"recipes/automatically-expand-urls-to-well-titled-links/#feedback-and-issues","text":"Have an idea for the extension? Feel free to share! \ud83c\udf89","title":"Feedback and issues"},{"location":"recipes/azure-devops-wiki/","text":"Azure DevOps Wiki # Publish your Foam workspace as an Azure DevOps wiki. Azure DevOps is Microsoft's collaboration software for software development teams, formerly known as Team Foundation Server (TFS) and Visual Studio Team Services. It is available as an on-premise or SaaS version. The following recipe was tested with the SaaS version, but should work the same way for the on-premise. The following recipe is written with the assumption that you already have an Azure DevOps project. Setup a Foam workspace # Generate a Foam workspace using the foam-template project . Change the remote to a git repository in Azure DevOps (Repos -> Import a Repository -> Add Clone URL with Authentication), or copy all the files into a new Azure DevOps git repository. Define which document will be the wiki home page. To do that, create a file called .order in the Foam workspace root folder, with first line being the document filename without .md extension. For a project created from the Foam template, the file would look like this: readme Push the repository to remote in Azure DevOps. Publish repository to a wiki # Navigate to your Azure DevOps project in a web browser. Choose Overview > Wiki . If you don't have wikis for your project, choose Publish code as a wiki on welcome page. Choose repository with your Foam workspace, branch (usually master or main ), folder (for workspace created from foam-template it is / ), and wiki name, and press Publish . A published workspace looks like this: There is default table of contents pane to the left of the wiki content. Here, you'll find a list of all directories that are present in your Foam workspace, and all wiki pages. Page names are derived from files names, and they are listed in alphabetical order. You may reorder pages by adding filenames without .md extension to .order file. Note that first entry in .order file defines wiki's home page. Update wiki # While you are pushing changes to GitHub, you won't see the wiki updated if you don't add Azure as a remote. You can push to multiple repositories simultaneously. First open a terminal and check if Azure is added running: git remote show origin . If you don't see Azure add it in the output then follow these steps. Rename your current remote (most likely named origin) to a different name by running: git remote rename origin main You can then add the remote for your second remote repository, in this case, Azure. e.g git remote add azure https://<YOUR_ID>@dev.azure.com/<YOUR_ID>/foam-notes/_git/foam-notes . You can get it from: Repos->Files->Clone and copy the URL. Now, you need to set up your origin remote to push to both of these. So run: git config -e and edit it. Add the remote origin section to the bottom of the file with the URLs from each remote repository you'd like to push to. You'll see something like that: bash [core] ... (ignore this part) ... [branch \"master\"] remote = github merge = refs/heads/master [remote \"github\"] url = git@github.com:username/repo.git fetch = +refs/heads/*:refs/remotes/github/* [remote \"azure\"] url = https://<YOUR_ID>@dev.azure.com/<YOUR_ID>/foam-notes/_git/foam-notes fetch = +refs/heads/*:refs/remotes/azure/* [remote \"origin\"] url = git@github.com:username/repo.git url = https://<YOUR_ID>@dev.azure.com/<YOUR_ID>/foam-notes/_git/foam-notes You can then push to both repositories by: git push origin master or a single one using: git push github master or git push azure master For more information, read the Azure DevOps documentation .","title":"Azure DevOps Wiki"},{"location":"recipes/azure-devops-wiki/#azure-devops-wiki","text":"Publish your Foam workspace as an Azure DevOps wiki. Azure DevOps is Microsoft's collaboration software for software development teams, formerly known as Team Foundation Server (TFS) and Visual Studio Team Services. It is available as an on-premise or SaaS version. The following recipe was tested with the SaaS version, but should work the same way for the on-premise. The following recipe is written with the assumption that you already have an Azure DevOps project.","title":"Azure DevOps Wiki"},{"location":"recipes/azure-devops-wiki/#setup-a-foam-workspace","text":"Generate a Foam workspace using the foam-template project . Change the remote to a git repository in Azure DevOps (Repos -> Import a Repository -> Add Clone URL with Authentication), or copy all the files into a new Azure DevOps git repository. Define which document will be the wiki home page. To do that, create a file called .order in the Foam workspace root folder, with first line being the document filename without .md extension. For a project created from the Foam template, the file would look like this: readme Push the repository to remote in Azure DevOps.","title":"Setup a Foam workspace"},{"location":"recipes/azure-devops-wiki/#publish-repository-to-a-wiki","text":"Navigate to your Azure DevOps project in a web browser. Choose Overview > Wiki . If you don't have wikis for your project, choose Publish code as a wiki on welcome page. Choose repository with your Foam workspace, branch (usually master or main ), folder (for workspace created from foam-template it is / ), and wiki name, and press Publish . A published workspace looks like this: There is default table of contents pane to the left of the wiki content. Here, you'll find a list of all directories that are present in your Foam workspace, and all wiki pages. Page names are derived from files names, and they are listed in alphabetical order. You may reorder pages by adding filenames without .md extension to .order file. Note that first entry in .order file defines wiki's home page.","title":"Publish repository to a wiki"},{"location":"recipes/azure-devops-wiki/#update-wiki","text":"While you are pushing changes to GitHub, you won't see the wiki updated if you don't add Azure as a remote. You can push to multiple repositories simultaneously. First open a terminal and check if Azure is added running: git remote show origin . If you don't see Azure add it in the output then follow these steps. Rename your current remote (most likely named origin) to a different name by running: git remote rename origin main You can then add the remote for your second remote repository, in this case, Azure. e.g git remote add azure https://<YOUR_ID>@dev.azure.com/<YOUR_ID>/foam-notes/_git/foam-notes . You can get it from: Repos->Files->Clone and copy the URL. Now, you need to set up your origin remote to push to both of these. So run: git config -e and edit it. Add the remote origin section to the bottom of the file with the URLs from each remote repository you'd like to push to. You'll see something like that: bash [core] ... (ignore this part) ... [branch \"master\"] remote = github merge = refs/heads/master [remote \"github\"] url = git@github.com:username/repo.git fetch = +refs/heads/*:refs/remotes/github/* [remote \"azure\"] url = https://<YOUR_ID>@dev.azure.com/<YOUR_ID>/foam-notes/_git/foam-notes fetch = +refs/heads/*:refs/remotes/azure/* [remote \"origin\"] url = git@github.com:username/repo.git url = https://<YOUR_ID>@dev.azure.com/<YOUR_ID>/foam-notes/_git/foam-notes You can then push to both repositories by: git push origin master or a single one using: git push github master or git push azure master For more information, read the Azure DevOps documentation .","title":"Update wiki"},{"location":"recipes/capture-notes-with-drafts-pro/","text":"Capture Notes With Drafts Pro # Context # You use Foam for VSCode to manage your notes You wish to adopt a practice such as A writing inbox for transient and incomplete notes You wish to use Drafts Pro to capture quick notes into your Foam notes from your iOS device Required Extensions # Foam for VSCode Other tools # We assume you are familiar with how to use GitHub (if you are using Foam this is implicit) You have an iOS device with Drafts You have upgraded to Drafts Pro (needed to edit actions). Instructions # Create a new action in Drafts Add a single step of type Script Edit the script adding the code from the block below Edit settings at the top of the script to suit your preferences Set other Action options in Drafts as you wish Save the Action In GitHub create a Personal Access Token and give it repo scope - make a note of the token In Drafts create a note Select the action you created in steps 1-6 On the first run you will need to add the following information: your GitHub username the repository name of your Foam repo the GitHub access token from step 7 An author name Check your Github repo for a commit If you are publishing your Foam to the web you may want to edit your publishing configuration to exclude inbox files - as publishing (and method) is a user choice that is beyond the scope of this recipe Code for Drafts Action # // adapted from https://forums.getdrafts.com/t/script-step-post-to-github-without-working-copy/3594 // post to writing inbox in Foam digital garden /* * edit these lines to suit your preferences */ const inboxFolder = \"inbox/\" ; // the folder in your Foam repo where notes are saved. MUST have trailing slash, except for root of repo use '' const requiredTags = [ 'inbox' ]; // all documents will have these added in addition to tags from the Drafts app const addLinkToInbox = true ; // true = created note will have link to [index](../index.md), false = no link const addTimeStamp = true ; // true = add a note of capture date/time at foot of note /* * stop editing */ const credential = Credential . create ( \"GitHub garden repo\" , \"The repo name, and its credentials, hosting your Foam notes\" ); credential . addTextField ( \"username\" , \"GitHub Username\" ); credential . addTextField ( 'repo' , 'Repo name' ); credential . addPasswordField ( \"key\" , \"GitHub personal access token\" ); credential . addTextField ( 'author' , 'Author' ); credential . authorize (); const githubKey = credential . getValue ( 'key' ); const githubUser = credential . getValue ( 'username' ); const repo = credential . getValue ( 'repo' ); const author = credential . getValue ( 'author' ); const http = HTTP . create (); // create HTTP object const base = 'https://api.github.com' ; const posttime = new Date (); const title = draft . title ; const txt = draft . processTemplate ( \"[[line|3..]]\" ); const mergedTags = [... draft . tags , ... requiredTags ]; const slugbase = title . toLowerCase (). replace ( /\\s/g , \"-\" ); const datestr = ` ${ posttime . getFullYear () } - ${ pad ( posttime . getMonth () + 1 ) } - ${ pad ( posttime . getDate ()) } ` ; const timestr = ` ${ pad ( posttime . getHours ()) } : ${ pad ( posttime . getMinutes ()) } :00` ; const yr = ` ${ posttime . getFullYear () } ` ; const pdOffset = posttime . getTimezoneOffset (); const offsetChar = pdOffset >= 0 ? '-' : '+' ; var pdHours = Math . floor ( pdOffset / 60 ); console . log ( pdHours ); pdHours = pdHours >= 0 ? pdHours : pdHours * - 1 ; console . log ( pdHours ); const tzString = ` ${ offsetChar }${ pad ( pdHours ) } :00` ; const postdate = ` ${ datestr } T ${ timestr }${ tzString } ` ; const slug = ` ${ slugbase } ` const fn = ` ${ slug } .md` ; let preamble = `# ${ title } \\ n \\ n` ; mergedTags . forEach ( function ( item , index ){ preamble += `# ${ item } ` ; } ); if ( addLinkToInbox ) { preamble += \"\\n\\n[inbox](../reference/inbox.md)\\n\" ; } preamble += \"\\n\\n\" ; var doc = ` ${ preamble }${ txt } ` ; if ( addTimeStamp ){ doc += ` \\ n \\ nCaptured: ${ postdate } \\ n` } const options = { url : `https://api.github.com/repos/ ${ githubUser } / ${ repo } /contents/ ${ inboxFolder }${ fn } ` , method : 'PUT' , data : { message : `Inbox from Drafts ${ datestr } ` , content : Base64 . encode ( doc ) }, headers : { 'Authorization' : `token ${ githubKey } ` } }; var response = http . request ( options ); if ( response . success ) { // yay } else { console . log ( response . statusCode ); console . log ( response . error ); } function pad ( n ) { let str = String ( n ); while ( str . length < 2 ) { str = `0 ${ str } ` ; } return str ; }","title":"Capture Notes With Drafts Pro"},{"location":"recipes/capture-notes-with-drafts-pro/#capture-notes-with-drafts-pro","text":"","title":"Capture Notes With Drafts Pro"},{"location":"recipes/capture-notes-with-drafts-pro/#context","text":"You use Foam for VSCode to manage your notes You wish to adopt a practice such as A writing inbox for transient and incomplete notes You wish to use Drafts Pro to capture quick notes into your Foam notes from your iOS device","title":"Context"},{"location":"recipes/capture-notes-with-drafts-pro/#required-extensions","text":"Foam for VSCode","title":"Required Extensions"},{"location":"recipes/capture-notes-with-drafts-pro/#other-tools","text":"We assume you are familiar with how to use GitHub (if you are using Foam this is implicit) You have an iOS device with Drafts You have upgraded to Drafts Pro (needed to edit actions).","title":"Other tools"},{"location":"recipes/capture-notes-with-drafts-pro/#instructions","text":"Create a new action in Drafts Add a single step of type Script Edit the script adding the code from the block below Edit settings at the top of the script to suit your preferences Set other Action options in Drafts as you wish Save the Action In GitHub create a Personal Access Token and give it repo scope - make a note of the token In Drafts create a note Select the action you created in steps 1-6 On the first run you will need to add the following information: your GitHub username the repository name of your Foam repo the GitHub access token from step 7 An author name Check your Github repo for a commit If you are publishing your Foam to the web you may want to edit your publishing configuration to exclude inbox files - as publishing (and method) is a user choice that is beyond the scope of this recipe","title":"Instructions"},{"location":"recipes/capture-notes-with-drafts-pro/#code-for-drafts-action","text":"// adapted from https://forums.getdrafts.com/t/script-step-post-to-github-without-working-copy/3594 // post to writing inbox in Foam digital garden /* * edit these lines to suit your preferences */ const inboxFolder = \"inbox/\" ; // the folder in your Foam repo where notes are saved. MUST have trailing slash, except for root of repo use '' const requiredTags = [ 'inbox' ]; // all documents will have these added in addition to tags from the Drafts app const addLinkToInbox = true ; // true = created note will have link to [index](../index.md), false = no link const addTimeStamp = true ; // true = add a note of capture date/time at foot of note /* * stop editing */ const credential = Credential . create ( \"GitHub garden repo\" , \"The repo name, and its credentials, hosting your Foam notes\" ); credential . addTextField ( \"username\" , \"GitHub Username\" ); credential . addTextField ( 'repo' , 'Repo name' ); credential . addPasswordField ( \"key\" , \"GitHub personal access token\" ); credential . addTextField ( 'author' , 'Author' ); credential . authorize (); const githubKey = credential . getValue ( 'key' ); const githubUser = credential . getValue ( 'username' ); const repo = credential . getValue ( 'repo' ); const author = credential . getValue ( 'author' ); const http = HTTP . create (); // create HTTP object const base = 'https://api.github.com' ; const posttime = new Date (); const title = draft . title ; const txt = draft . processTemplate ( \"[[line|3..]]\" ); const mergedTags = [... draft . tags , ... requiredTags ]; const slugbase = title . toLowerCase (). replace ( /\\s/g , \"-\" ); const datestr = ` ${ posttime . getFullYear () } - ${ pad ( posttime . getMonth () + 1 ) } - ${ pad ( posttime . getDate ()) } ` ; const timestr = ` ${ pad ( posttime . getHours ()) } : ${ pad ( posttime . getMinutes ()) } :00` ; const yr = ` ${ posttime . getFullYear () } ` ; const pdOffset = posttime . getTimezoneOffset (); const offsetChar = pdOffset >= 0 ? '-' : '+' ; var pdHours = Math . floor ( pdOffset / 60 ); console . log ( pdHours ); pdHours = pdHours >= 0 ? pdHours : pdHours * - 1 ; console . log ( pdHours ); const tzString = ` ${ offsetChar }${ pad ( pdHours ) } :00` ; const postdate = ` ${ datestr } T ${ timestr }${ tzString } ` ; const slug = ` ${ slugbase } ` const fn = ` ${ slug } .md` ; let preamble = `# ${ title } \\ n \\ n` ; mergedTags . forEach ( function ( item , index ){ preamble += `# ${ item } ` ; } ); if ( addLinkToInbox ) { preamble += \"\\n\\n[inbox](../reference/inbox.md)\\n\" ; } preamble += \"\\n\\n\" ; var doc = ` ${ preamble }${ txt } ` ; if ( addTimeStamp ){ doc += ` \\ n \\ nCaptured: ${ postdate } \\ n` } const options = { url : `https://api.github.com/repos/ ${ githubUser } / ${ repo } /contents/ ${ inboxFolder }${ fn } ` , method : 'PUT' , data : { message : `Inbox from Drafts ${ datestr } ` , content : Base64 . encode ( doc ) }, headers : { 'Authorization' : `token ${ githubKey } ` } }; var response = http . request ( options ); if ( response . success ) { // yay } else { console . log ( response . statusCode ); console . log ( response . error ); } function pad ( n ) { let str = String ( n ); while ( str . length < 2 ) { str = `0 ${ str } ` ; } return str ; }","title":"Code for Drafts Action"},{"location":"recipes/creating-new-notes/","text":"Creating New Notes # Write out a new [[wiki-link]] and Cmd + Click to create a new file and enter it. For keyboard navigation, use the 'Follow Definition' key F12 (or remap key binding to something more ergonomic) Cmd + Shift + P ( Ctrl + Shift + P for Windows), execute New Note from VS Code Markdown Notes and enter a Title Case Name to create title-case-name.md Add a keyboard binding to make creating new notes easier. You shouldn't worry too much about categorising your notes. You can always search-for-notes , and explore them using the graph-visualisation .","title":"Creating New Notes"},{"location":"recipes/creating-new-notes/#creating-new-notes","text":"Write out a new [[wiki-link]] and Cmd + Click to create a new file and enter it. For keyboard navigation, use the 'Follow Definition' key F12 (or remap key binding to something more ergonomic) Cmd + Shift + P ( Ctrl + Shift + P for Windows), execute New Note from VS Code Markdown Notes and enter a Title Case Name to create title-case-name.md Add a keyboard binding to make creating new notes easier. You shouldn't worry too much about categorising your notes. You can always search-for-notes , and explore them using the graph-visualisation .","title":"Creating New Notes"},{"location":"recipes/custom-markdown-preview-styles/","text":"Custom Markdown Preview Styles # Visual Studio Code allows you to use your own CSS in the Markdown preview tab. Instructions # Custom CSS for the Markdown preview can be implemented by using the \"markdown.styles\": [] setting in settings.json . The stylesheets can either be https URLs or relative paths to local files in the current workspace. For example, to load a stylesheet called Style.css , we can update settings.json with the following line: { \"markdown.styles\": [\"Style.css\"] }","title":"Custom Markdown Preview Styles"},{"location":"recipes/custom-markdown-preview-styles/#custom-markdown-preview-styles","text":"Visual Studio Code allows you to use your own CSS in the Markdown preview tab.","title":"Custom Markdown Preview Styles"},{"location":"recipes/custom-markdown-preview-styles/#instructions","text":"Custom CSS for the Markdown preview can be implemented by using the \"markdown.styles\": [] setting in settings.json . The stylesheets can either be https URLs or relative paths to local files in the current workspace. For example, to load a stylesheet called Style.css , we can update settings.json with the following line: { \"markdown.styles\": [\"Style.css\"] }","title":"Instructions"},{"location":"recipes/customising-styles/","text":"Customising Styles # You can edit assets/css/style.scss to change how published pages look. todo good-first-task","title":"Customising Styles"},{"location":"recipes/customising-styles/#customising-styles","text":"You can edit assets/css/style.scss to change how published pages look. todo good-first-task","title":"Customising Styles"},{"location":"recipes/daily-notes/","text":"Daily notes # Automatically create a Daily Note by executing the \"Foam: Open Daily Note\" command. If a Daily Note for today's date already exists, the command opens the existing note. Keyboard shortcut # The default keyboard shortcut for \"Open Daily Note\" is alt + d . This can be overridden using the VS Code Keybindings editor . Configuration # By default, Daily Notes will be created in a file called yyyy-mm-dd.md in the workspace root, with a heading yyyy-mm-dd . These settings can be overridden in your workspace or global .vscode/settings.json file, using the dateformat date masking syntax : \"foam.openDailyNote.directory\" : \"journal\" , \"foam.openDailyNote.filenameFormat\" : \"'daily-note'-yyyy-mm-dd\" , \"foam.openDailyNote.fileExtension\" : \"mdx\" , \"foam.openDailyNote.titleFormat\" : \"'Journal Entry, ' dddd, mmmm d\" , The above configuration would create a file journal/note-2020-07-25.mdx , with the heading Journal Entry, Sunday, July 25 . Daily Note Templates # In the future, Foam may provide a functionality for specifying a template for new Daily Notes and other types of documents. In the meantime, you can use VS Code Snippets for defining your own Daily Note template. Roam-style Automatic Daily Notes # In the future, Foam may provide an option for automatically opening your Daily Note when you open your Foam workspace. If you want this behavior now, you can use the excellent Auto Run Command extension to run the \"Open Daily Note\" command upon entering a Foam workspace by specifying the following configuration in your .vscode/settings.json : \"auto-run-command.rules\" : [ { \"condition\" : \"hasFile: .vscode/foam.json\" , \"command\" : \"foam-vscode.open-daily-note\" , \"message\" : \"Have a nice day!\" } ] , Extend Functionality (Weekly, Monthly, Quarterly Notes) # Please see note-macros","title":"Daily notes"},{"location":"recipes/daily-notes/#daily-notes","text":"Automatically create a Daily Note by executing the \"Foam: Open Daily Note\" command. If a Daily Note for today's date already exists, the command opens the existing note.","title":"Daily notes"},{"location":"recipes/daily-notes/#keyboard-shortcut","text":"The default keyboard shortcut for \"Open Daily Note\" is alt + d . This can be overridden using the VS Code Keybindings editor .","title":"Keyboard shortcut"},{"location":"recipes/daily-notes/#configuration","text":"By default, Daily Notes will be created in a file called yyyy-mm-dd.md in the workspace root, with a heading yyyy-mm-dd . These settings can be overridden in your workspace or global .vscode/settings.json file, using the dateformat date masking syntax : \"foam.openDailyNote.directory\" : \"journal\" , \"foam.openDailyNote.filenameFormat\" : \"'daily-note'-yyyy-mm-dd\" , \"foam.openDailyNote.fileExtension\" : \"mdx\" , \"foam.openDailyNote.titleFormat\" : \"'Journal Entry, ' dddd, mmmm d\" , The above configuration would create a file journal/note-2020-07-25.mdx , with the heading Journal Entry, Sunday, July 25 .","title":"Configuration"},{"location":"recipes/daily-notes/#daily-note-templates","text":"In the future, Foam may provide a functionality for specifying a template for new Daily Notes and other types of documents. In the meantime, you can use VS Code Snippets for defining your own Daily Note template.","title":"Daily Note Templates"},{"location":"recipes/daily-notes/#roam-style-automatic-daily-notes","text":"In the future, Foam may provide an option for automatically opening your Daily Note when you open your Foam workspace. If you want this behavior now, you can use the excellent Auto Run Command extension to run the \"Open Daily Note\" command upon entering a Foam workspace by specifying the following configuration in your .vscode/settings.json : \"auto-run-command.rules\" : [ { \"condition\" : \"hasFile: .vscode/foam.json\" , \"command\" : \"foam-vscode.open-daily-note\" , \"message\" : \"Have a nice day!\" } ] ,","title":"Roam-style Automatic Daily Notes"},{"location":"recipes/daily-notes/#extend-functionality-weekly-monthly-quarterly-notes","text":"Please see note-macros","title":"Extend Functionality (Weekly, Monthly, Quarterly Notes)"},{"location":"recipes/diagrams-in-markdown/","text":"Diagrams in Markdown # We have two alternative recipes for displaying diagrams in markdown: Mermaid Draw.io Mermaid # You can use Mermaid plugin to draw and preview diagrams in your content. \u26a0\ufe0f Be aware that Mermaid diagrams don't automatically get rendered in published Foams in github-pages , and would require you to eject to another static site generation approach that supports Mermaid plugins. Draw.io # Draw.io extension allows you to create, edit, and display your diagrams without leaving Visual Studio Code. The .drawio.svg or .drawio.png files can be automatically embedded and displayed in published Foams, no export needed. FYI, the diagram below was made using Draw.io! You can check the diagram here . Using Draw.io # Install Draw.io VS Code extension. Create a new *.drawio.svg or *.drawio.png file. Start drawing your diagram. Once you done, save it. Embed the diagram file as you embedding the image file, for example: ![My Diagram](my-diagram.drawio.svg)","title":"Diagrams in Markdown"},{"location":"recipes/diagrams-in-markdown/#diagrams-in-markdown","text":"We have two alternative recipes for displaying diagrams in markdown: Mermaid Draw.io","title":"Diagrams in Markdown"},{"location":"recipes/diagrams-in-markdown/#mermaid","text":"You can use Mermaid plugin to draw and preview diagrams in your content. \u26a0\ufe0f Be aware that Mermaid diagrams don't automatically get rendered in published Foams in github-pages , and would require you to eject to another static site generation approach that supports Mermaid plugins.","title":"Mermaid"},{"location":"recipes/diagrams-in-markdown/#drawio","text":"Draw.io extension allows you to create, edit, and display your diagrams without leaving Visual Studio Code. The .drawio.svg or .drawio.png files can be automatically embedded and displayed in published Foams, no export needed. FYI, the diagram below was made using Draw.io! You can check the diagram here .","title":"Draw.io"},{"location":"recipes/diagrams-in-markdown/#using-drawio","text":"Install Draw.io VS Code extension. Create a new *.drawio.svg or *.drawio.png file. Start drawing your diagram. Once you done, save it. Embed the diagram file as you embedding the image file, for example: ![My Diagram](my-diagram.drawio.svg)","title":"Using Draw.io"},{"location":"recipes/eleventy-and-netlify/","text":"Eleventy and Netlify # You can use foam-eleventy-template to generate a static site with Eleventy , and host it online on Netlify . With this template you can - Have control over what to publish and what to keep private - Customize the styling of the site to your own liking Publishing your foam # When you're ready to publish, import the GitHub repository you created with foam-eleventy-template into your Netlify account. (Create one if you don't have it already.) Once that's done, all you have to do is make changes to your workspace in VS Code and push them to the main branch on GitHub. Netlify will recognize the changes, deploy them automatically and give you a link where your Foam is published. That's it! You can now see it online and use that link to share it with your friends, so that they can see it too.","title":"Eleventy and Netlify"},{"location":"recipes/eleventy-and-netlify/#eleventy-and-netlify","text":"You can use foam-eleventy-template to generate a static site with Eleventy , and host it online on Netlify . With this template you can - Have control over what to publish and what to keep private - Customize the styling of the site to your own liking","title":"Eleventy and Netlify"},{"location":"recipes/eleventy-and-netlify/#publishing-your-foam","text":"When you're ready to publish, import the GitHub repository you created with foam-eleventy-template into your Netlify account. (Create one if you don't have it already.) Once that's done, all you have to do is make changes to your workspace in VS Code and push them to the main branch on GitHub. Netlify will recognize the changes, deploy them automatically and give you a link where your Foam is published. That's it! You can now see it online and use that link to share it with your friends, so that they can see it too.","title":"Publishing your foam"},{"location":"recipes/gistpad/","text":"GistPad # GistPad is a Visual Studio Code extension that allows you to edit your GitHub gists and repos, without needing to clone anything locally. It provides support for editing Foam workspaces, complete with [[link]] completion/navigation , daily pages , pasting images and backlinks . If you'd like to persist your notes in a GitHub repository, and automatically sync changes without needing to manually commit/push/pull, then GistPad might be an option worth exploring. Getting started # To start using GistPad for your Foam-based knowledge base, simply perform the following steps: Download the GistPad extension and then re-start Visual Studio Code Run the GistPad: Sign In command, and provide a GitHub token that includes the repo scope (and optionally gist and delete_repo scope, if you'd like to use GistPad for managing your GitHub content more holistically) Run the GistPad: Manage Repository command and select the Create repo from template... or Create private repo from template... depending on your preference Select the Foam-style wiki template, and then specify a name for your Foam workspace (e.g. my-foam-notes , johns-knowledge-base ) Your new repo will be created in your GitHub account, and the Foam welcome page will be automatically opened. If you already have an existing Foam workspace in GitHub, then when you run step #3 above, simply select or specify the name of the GitHub repository instead. Note: If you have any and all feedback on how GistPad can be improved to support your Foam workflow, please don't hesitate to let us know ! \ud83d\udc4d Managing your workspace # Once you've opened/created the Foam repository, it will appear in the Repositories view of the GistPad tab (the one with the little notebook icon). From this tree view, you can add/edit/delete/rename new pages, upload local files, as well as view the backlinks for each page (they appear as child notes of a page). Editing your workspace # When you create or open a page, you can edit the markdown content as usual, as well as paste images , and create [[links]] to other pages . When you type [[ , you'll recieve auto-completion for the existing pages in your workspace, and you can also automatically create new pages by simply creating a link to it. Since you're using the Visual Studio Code markdown editor, you can benefit from all of the rich language services (e.g. syntax highlighting, header collapsing), as well as the extension ecosystem (e.g. Emojisense ). Navigating your workspace # When editing a file, you can easily navigate [[links]] by hovering over them to see a preview of their contents and/or cmd+clicking on them in order to jump to the respective page. Furthermore, when you add a link to a page, a backlink is automatically added to it. You can view a page's backlinks using either of the following techniques: Expanding the file's node in the Repositories tree, since it's child nodes will represent backlinks. This makes it easy to browse your pages and their backlinks in a single hierachical view. Opening a file, and then viewing it's backlinks list at the bottom of the editor view. This makes it easy to read a page and then see its backlinks in a contextually rich way. Daily Pages # In addition to create arbitrary pages, you can also use GistPad for journaling or capturing daily notes . Simply click the calendar icon in the Repositories tree, which will open up the page that represents today. If the page doesn't already exist, then it will be created in the workspace before being opened.","title":"GistPad"},{"location":"recipes/gistpad/#gistpad","text":"GistPad is a Visual Studio Code extension that allows you to edit your GitHub gists and repos, without needing to clone anything locally. It provides support for editing Foam workspaces, complete with [[link]] completion/navigation , daily pages , pasting images and backlinks . If you'd like to persist your notes in a GitHub repository, and automatically sync changes without needing to manually commit/push/pull, then GistPad might be an option worth exploring.","title":"GistPad"},{"location":"recipes/gistpad/#getting-started","text":"To start using GistPad for your Foam-based knowledge base, simply perform the following steps: Download the GistPad extension and then re-start Visual Studio Code Run the GistPad: Sign In command, and provide a GitHub token that includes the repo scope (and optionally gist and delete_repo scope, if you'd like to use GistPad for managing your GitHub content more holistically) Run the GistPad: Manage Repository command and select the Create repo from template... or Create private repo from template... depending on your preference Select the Foam-style wiki template, and then specify a name for your Foam workspace (e.g. my-foam-notes , johns-knowledge-base ) Your new repo will be created in your GitHub account, and the Foam welcome page will be automatically opened. If you already have an existing Foam workspace in GitHub, then when you run step #3 above, simply select or specify the name of the GitHub repository instead. Note: If you have any and all feedback on how GistPad can be improved to support your Foam workflow, please don't hesitate to let us know ! \ud83d\udc4d","title":"Getting started"},{"location":"recipes/gistpad/#managing-your-workspace","text":"Once you've opened/created the Foam repository, it will appear in the Repositories view of the GistPad tab (the one with the little notebook icon). From this tree view, you can add/edit/delete/rename new pages, upload local files, as well as view the backlinks for each page (they appear as child notes of a page).","title":"Managing your workspace"},{"location":"recipes/gistpad/#editing-your-workspace","text":"When you create or open a page, you can edit the markdown content as usual, as well as paste images , and create [[links]] to other pages . When you type [[ , you'll recieve auto-completion for the existing pages in your workspace, and you can also automatically create new pages by simply creating a link to it. Since you're using the Visual Studio Code markdown editor, you can benefit from all of the rich language services (e.g. syntax highlighting, header collapsing), as well as the extension ecosystem (e.g. Emojisense ).","title":"Editing your workspace"},{"location":"recipes/gistpad/#navigating-your-workspace","text":"When editing a file, you can easily navigate [[links]] by hovering over them to see a preview of their contents and/or cmd+clicking on them in order to jump to the respective page. Furthermore, when you add a link to a page, a backlink is automatically added to it. You can view a page's backlinks using either of the following techniques: Expanding the file's node in the Repositories tree, since it's child nodes will represent backlinks. This makes it easy to browse your pages and their backlinks in a single hierachical view. Opening a file, and then viewing it's backlinks list at the bottom of the editor view. This makes it easy to read a page and then see its backlinks in a contextually rich way.","title":"Navigating your workspace"},{"location":"recipes/gistpad/#daily-pages","text":"In addition to create arbitrary pages, you can also use GistPad for journaling or capturing daily notes . Simply click the calendar icon in the Repositories tree, which will open up the page that represents today. If the page doesn't already exist, then it will be created in the workspace before being opened.","title":"Daily Pages"},{"location":"recipes/git-integration/","text":"Git integration # There are (too) many ways to commit your changes to source control: Using VS Code's own git integration Using GitLens (included in Foam for inline blame) Whatever way you like to do it (CLI?) The quick and easy way is to use the Git: Commit All command after editing files. The default Foam workspace settings will stage & sync all of your changes to the remote: Cmd + Shift + P ( Ctrl + Shift + P for Windows), execute Git: Commit All This could be improved. todo good-first-task","title":"Git integration"},{"location":"recipes/git-integration/#git-integration","text":"There are (too) many ways to commit your changes to source control: Using VS Code's own git integration Using GitLens (included in Foam for inline blame) Whatever way you like to do it (CLI?) The quick and easy way is to use the Git: Commit All command after editing files. The default Foam workspace settings will stage & sync all of your changes to the remote: Cmd + Shift + P ( Ctrl + Shift + P for Windows), execute Git: Commit All This could be improved. todo good-first-task","title":"Git integration"},{"location":"recipes/gitee-pages/","text":"Gitee Pages # Similar to github-pages , you just need to fork repository from github, and turn on gitee pages if you use foam-template , be awared of that gitee using an older version of jekyll engine you need to delete {% github_edit_link \"Improve this page\" %}. in default html to avoid syntax error","title":"Gitee Pages"},{"location":"recipes/gitee-pages/#gitee-pages","text":"Similar to github-pages , you just need to fork repository from github, and turn on gitee pages if you use foam-template , be awared of that gitee using an older version of jekyll engine you need to delete {% github_edit_link \"Improve this page\" %}. in default html to avoid syntax error","title":"Gitee Pages"},{"location":"recipes/github-pages/","text":"Github Pages # The Foam template is GitHub Pages ready, all you have to do is turn it on in your repository settings . The default GitHub Pages template is called Primer . See Primer docs for how to customise html layouts and templates. GitHub Pages is built on Jekyll , so it supports things like permalinks, front matter metadata etc. Other templates # There are many other templates which also support publish your foam workspace to github pages gatsby-digital-garden repo demo-website foam-mkdocs-template repo demo-website foam-jekyll-template repo demo-website todo good-first-task Improve this documentation","title":"Github Pages"},{"location":"recipes/github-pages/#github-pages","text":"The Foam template is GitHub Pages ready, all you have to do is turn it on in your repository settings . The default GitHub Pages template is called Primer . See Primer docs for how to customise html layouts and templates. GitHub Pages is built on Jekyll , so it supports things like permalinks, front matter metadata etc.","title":"Github Pages"},{"location":"recipes/github-pages/#other-templates","text":"There are many other templates which also support publish your foam workspace to github pages gatsby-digital-garden repo demo-website foam-mkdocs-template repo demo-website foam-jekyll-template repo demo-website todo good-first-task Improve this documentation","title":"Other templates"},{"location":"recipes/gitlab-pages/","text":"GitLab Pages # You don't have to use GitHub to serve Foam pages. You can also use GitLab. Setup a project # Generate the directory from GitHub # Generate a solution using the [Foam template]. Change the remote to GitLab, or copy all the files into a new GitLab repo. Add a _config.yaml # Add another file to the root directory (the one with readme.md in it) called _config.yaml (no extension) title : My Awesome Foam Project baseurl : \"\" # the subpath of your site, e.g. /blog url : \"/\" # the base hostname & protocol for your site theme : jekyll-theme-minimal You can choose a theme if you want from places like Jekyll Themes Add a Gemlock file # Add another file to the root directory (the one with readme.md in it) called Gemfile (no extension) source \"https://rubygems.org\" gem \"jekyll\" gem \"jekyll-theme-minimal\" gem \"jekyll-optional-front-matter\" Commit the file and push it to gitlab. Setup CI/CD # From the project home in GitLab click Set up CI/CD Choose Jekyll as your template from the template dropdown Click commit Now when you go to CI / CD > Pipelines, you should see the code running Troubleshooting # Could not locate Gemfile - You didn't follow the steps above to [#Add a Gemlock file] Conversion error: Jekyll::Converters::Scss encountered an error while converting You need to reference a theme. Pages are running in CI/CD, but I only ever see test , and never deploy - Perhaps you've renamed the main branch (from master) - check the settings in .gitlab-ci.yml and ensure the deploy command is running to the branch you expect it to. I deployed, but my .msd files don't seem to be being converted into .html files - You need a gem that GitHub installs by default - check gem \"jekyll-optional-front-matter\" appears in the Gemfile","title":"GitLab Pages"},{"location":"recipes/gitlab-pages/#gitlab-pages","text":"You don't have to use GitHub to serve Foam pages. You can also use GitLab.","title":"GitLab Pages"},{"location":"recipes/gitlab-pages/#setup-a-project","text":"","title":"Setup a project"},{"location":"recipes/gitlab-pages/#generate-the-directory-from-github","text":"Generate a solution using the [Foam template]. Change the remote to GitLab, or copy all the files into a new GitLab repo.","title":"Generate the directory from GitHub"},{"location":"recipes/gitlab-pages/#add-a-_configyaml","text":"Add another file to the root directory (the one with readme.md in it) called _config.yaml (no extension) title : My Awesome Foam Project baseurl : \"\" # the subpath of your site, e.g. /blog url : \"/\" # the base hostname & protocol for your site theme : jekyll-theme-minimal You can choose a theme if you want from places like Jekyll Themes","title":"Add a _config.yaml"},{"location":"recipes/gitlab-pages/#add-a-gemlock-file","text":"Add another file to the root directory (the one with readme.md in it) called Gemfile (no extension) source \"https://rubygems.org\" gem \"jekyll\" gem \"jekyll-theme-minimal\" gem \"jekyll-optional-front-matter\" Commit the file and push it to gitlab.","title":"Add a Gemlock file"},{"location":"recipes/gitlab-pages/#setup-cicd","text":"From the project home in GitLab click Set up CI/CD Choose Jekyll as your template from the template dropdown Click commit Now when you go to CI / CD > Pipelines, you should see the code running","title":"Setup CI/CD"},{"location":"recipes/gitlab-pages/#troubleshooting","text":"Could not locate Gemfile - You didn't follow the steps above to [#Add a Gemlock file] Conversion error: Jekyll::Converters::Scss encountered an error while converting You need to reference a theme. Pages are running in CI/CD, but I only ever see test , and never deploy - Perhaps you've renamed the main branch (from master) - check the settings in .gitlab-ci.yml and ensure the deploy command is running to the branch you expect it to. I deployed, but my .msd files don't seem to be being converted into .html files - You need a gem that GitHub installs by default - check gem \"jekyll-optional-front-matter\" appears in the Gemfile","title":"Troubleshooting"},{"location":"recipes/good-first-task/","text":"Good First Task # See the backlinks of this page for good first contribution opportunities. materialized-backlinks would help here.","title":"Good First Task"},{"location":"recipes/good-first-task/#good-first-task","text":"See the backlinks of this page for good first contribution opportunities. materialized-backlinks would help here.","title":"Good First Task"},{"location":"recipes/graph-visualisation/","text":"Graph visualisation # Cmd + Shift + P ( Ctrl + Shift + P for Windows), type Show graph . (Depends on Markdown Links .)","title":"Graph visualisation"},{"location":"recipes/graph-visualisation/#graph-visualisation","text":"Cmd + Shift + P ( Ctrl + Shift + P for Windows), type Show graph . (Depends on Markdown Links .)","title":"Graph visualisation"},{"location":"recipes/how-to-write-recipes/","text":"How to Write Recipes # This is an example of how to structure a Recipe. The first paragraph or two should explain the purpose of the recipe succinctly, including why it's useful, if that's not obvious. Recipes are intended to document: - How to use Foam's basic features - Power user pro-tips - Useful customisations of the default Foam environment - Integrations with third party tools and extensions (should be listed below) Required Extensions # Hacker Typer (not really required for this recipe, just an example) Foam for VSCode (installed by default) The first section should be a bulleted list of extensions required to use this recipe. At a minimum, this section should list all additional, non-standard extensions. Ideally, you should also note which Foam recommended-extensions are responsible for providing this feature, so any issue reports can be directed to the correct repositories. When creating new recipes, if you don't know which extension does what, you can leave it out. Instructions # Here we describe how the extension should be used. You may include a screenshot or GIF of the feature in action by uploading an image to the assets/images directory. Please try to keep GIFs as small as possible by recording them with a low frame rate. That's pretty much it! How to contribute # You can add recipes by creating a pull request to foambubble/foam on GitHub. Read more in our contribution-guide .","title":"How to Write Recipes"},{"location":"recipes/how-to-write-recipes/#how-to-write-recipes","text":"This is an example of how to structure a Recipe. The first paragraph or two should explain the purpose of the recipe succinctly, including why it's useful, if that's not obvious. Recipes are intended to document: - How to use Foam's basic features - Power user pro-tips - Useful customisations of the default Foam environment - Integrations with third party tools and extensions (should be listed below)","title":"How to Write Recipes"},{"location":"recipes/how-to-write-recipes/#required-extensions","text":"Hacker Typer (not really required for this recipe, just an example) Foam for VSCode (installed by default) The first section should be a bulleted list of extensions required to use this recipe. At a minimum, this section should list all additional, non-standard extensions. Ideally, you should also note which Foam recommended-extensions are responsible for providing this feature, so any issue reports can be directed to the correct repositories. When creating new recipes, if you don't know which extension does what, you can leave it out.","title":"Required Extensions"},{"location":"recipes/how-to-write-recipes/#instructions","text":"Here we describe how the extension should be used. You may include a screenshot or GIF of the feature in action by uploading an image to the assets/images directory. Please try to keep GIFs as small as possible by recording them with a low frame rate. That's pretty much it!","title":"Instructions"},{"location":"recipes/how-to-write-recipes/#how-to-contribute","text":"You can add recipes by creating a pull request to foambubble/foam on GitHub. Read more in our contribution-guide .","title":"How to contribute"},{"location":"recipes/images-from-your-clipboard/","text":"Images from your Clipboard # You can directly link and paste images that are copied to the clipboard using either the Paste Image extension, or the Markdown Image extension. The former does not have MDX support (yet), the latter does.","title":"Images from your Clipboard"},{"location":"recipes/images-from-your-clipboard/#images-from-your-clipboard","text":"You can directly link and paste images that are copied to the clipboard using either the Paste Image extension, or the Markdown Image extension. The former does not have MDX support (yet), the latter does.","title":"Images from your Clipboard"},{"location":"recipes/link-formatting-and-autocompletion/","text":"Link Formatting and Autocompletion # When coming from Roam, Obsidian and such tools, you may be used to writing wiki-links in [[Title Case Format]] . Foam will eventually support this syntax (see: foambubble/rfcs#3 ), but for the time being, we do not. Foam relies heavily on our recommended-extensions , and each extension has slightly different semantics and edge cases. This is a short guide on how to name your files, format your links, and configure your editor so that you can enjoy Foam until our implementation catches up with our aspirations. Short version # Name your files in lower-dash-case.md . Read on: How to name your files Use wiki-links that match the file name exactly, without file extension: [[lower-dash-case]] Read on: How to format your links Read on: How to autocomplete your links correctly Ensure every file has a # Heading element This will be used as your document title. How to name your files # As described in foam-file-format , Foam file names should not contain spaces. Because of the Markdown Notes extension's default behaviour, we recommend naming your files in lower-dash-case: foam-file-format.md . \u2139\ufe0f This means: - All lowercase - No spaces, punctuation or special characters - Using dashes as word separators - Ending with a .md extension \u2705 Valid lower-dash-case file names include: - roadmap.md - foam-file-format.md - f-f-f-f-falling.md \u274c Some invalid names include: Roadmap.md (Name should not be capitalised) foam file format.md (Name should not have spaces) f-f-f-f-falling!.md (Name should not have special characters) Some of these file names may work for a subset of use cases (for example, if you don't publish your Foam site), but we'd still recommend following these rules. As per foam-file-format , we eventually want to make Foam a lot more lenient. As per our principles , you should be able to focus on your work and not fight against Foam. We're not there yet, but we'll get there. How to format your links # Use wiki-links to link between files. Each link: - Should match file name exactly : [foam-file-format](../reference/foam-file-format.md) , not [Foam File Format](../reference/foam-file-format.md) - If you're reading this document on the Foam website, you might think: \"That's not right!\" What about links like foam-file-format ! That uses spaces, capitalised letters, and everything! - But if you look at the raw version of this document , you'll see that the link is actually written as [foam-file-format](../reference/foam-file-format.md) : we make it look nicer with a bit of web magic and a sprinkle of JavaScript. - Not include a file extension : [foam-file-format](../reference/foam-file-format.md) , not [foam-file-format.md](../reference/foam-file-format.md) . - You might ask: If I can't use the .md extension, why does Foam autocomplete it for me? - The answer is: It's a setting. See How to autocomplete your links correctly below. How to autocomplete your links correctly # Foam autocompletion is provided by Markdown Notes . The default behaviour of Markdown Notes Autocomplete is to suffix .md to the end of suggestion, such as in the below screenshot: To change this behaviour, add the below to your .vscode/settings.json file: \"vscodeMarkdownNotes.noteCompletionConvention\" : \"noExtension\" Now your autocomplete will look like the below screenshot: If you created your Foam from the official foam-template project after 27 th July 2020, this setting should be already correctly set.","title":"Link Formatting and Autocompletion"},{"location":"recipes/link-formatting-and-autocompletion/#link-formatting-and-autocompletion","text":"When coming from Roam, Obsidian and such tools, you may be used to writing wiki-links in [[Title Case Format]] . Foam will eventually support this syntax (see: foambubble/rfcs#3 ), but for the time being, we do not. Foam relies heavily on our recommended-extensions , and each extension has slightly different semantics and edge cases. This is a short guide on how to name your files, format your links, and configure your editor so that you can enjoy Foam until our implementation catches up with our aspirations.","title":"Link Formatting and Autocompletion"},{"location":"recipes/link-formatting-and-autocompletion/#short-version","text":"Name your files in lower-dash-case.md . Read on: How to name your files Use wiki-links that match the file name exactly, without file extension: [[lower-dash-case]] Read on: How to format your links Read on: How to autocomplete your links correctly Ensure every file has a # Heading element This will be used as your document title.","title":"Short version"},{"location":"recipes/link-formatting-and-autocompletion/#how-to-name-your-files","text":"As described in foam-file-format , Foam file names should not contain spaces. Because of the Markdown Notes extension's default behaviour, we recommend naming your files in lower-dash-case: foam-file-format.md . \u2139\ufe0f This means: - All lowercase - No spaces, punctuation or special characters - Using dashes as word separators - Ending with a .md extension \u2705 Valid lower-dash-case file names include: - roadmap.md - foam-file-format.md - f-f-f-f-falling.md \u274c Some invalid names include: Roadmap.md (Name should not be capitalised) foam file format.md (Name should not have spaces) f-f-f-f-falling!.md (Name should not have special characters) Some of these file names may work for a subset of use cases (for example, if you don't publish your Foam site), but we'd still recommend following these rules. As per foam-file-format , we eventually want to make Foam a lot more lenient. As per our principles , you should be able to focus on your work and not fight against Foam. We're not there yet, but we'll get there.","title":"How to name your files"},{"location":"recipes/link-formatting-and-autocompletion/#how-to-format-your-links","text":"Use wiki-links to link between files. Each link: - Should match file name exactly : [foam-file-format](../reference/foam-file-format.md) , not [Foam File Format](../reference/foam-file-format.md) - If you're reading this document on the Foam website, you might think: \"That's not right!\" What about links like foam-file-format ! That uses spaces, capitalised letters, and everything! - But if you look at the raw version of this document , you'll see that the link is actually written as [foam-file-format](../reference/foam-file-format.md) : we make it look nicer with a bit of web magic and a sprinkle of JavaScript. - Not include a file extension : [foam-file-format](../reference/foam-file-format.md) , not [foam-file-format.md](../reference/foam-file-format.md) . - You might ask: If I can't use the .md extension, why does Foam autocomplete it for me? - The answer is: It's a setting. See How to autocomplete your links correctly below.","title":"How to format your links"},{"location":"recipes/link-formatting-and-autocompletion/#how-to-autocomplete-your-links-correctly","text":"Foam autocompletion is provided by Markdown Notes . The default behaviour of Markdown Notes Autocomplete is to suffix .md to the end of suggestion, such as in the below screenshot: To change this behaviour, add the below to your .vscode/settings.json file: \"vscodeMarkdownNotes.noteCompletionConvention\" : \"noExtension\" Now your autocomplete will look like the below screenshot: If you created your Foam from the official foam-template project after 27 th July 2020, this setting should be already correctly set.","title":"How to autocomplete your links correctly"},{"location":"recipes/math-support/","text":"Math Support # Published Foam pages don't support math formulas by default. To enable this feature, you can add the following code snippet to the end of _layouts/page.html : < script src = \"https://cdn.jsdelivr.net/npm/mathjax@2/MathJax.js?config=TeX-AMS-MML_HTMLorMML\" type = \"text/javascript\" ></ script > < script type = \"text/x-mathjax-config\" > MathJax . Hub . Config ({ tex2jax : { skipTags : [ 'script' , 'noscript' , 'style' , 'textarea' , 'pre' ], inlineMath : [[ '$' , '$' ]] } }); </ script > This approach uses the MathJax library to render anything delimited by $ (customizable in the snippet above) pairs to inline math and $$ to blocks of math (like a html div tag) using with the AMS-LaTeX dialect embedded within MathJax. Example of inline math using $...$ : $e^{i \\pi}+1=0$ , becomes e^{i \\pi}+1=0 e^{i \\pi}+1=0 Example of a math block using $$...$$ : $$ f_{\\mathbf{X}}\\left(x_{1}, \\ldots, x_{k}\\right)=\\frac{\\exp \\left(-\\frac{1}{2}(\\mathbf{x}-\\boldsymbol{\\mu})^{\\mathrm{T}} \\mathbf{\\Sigma}^{-1}(\\mathbf{x}-\\boldsymbol{\\mu})\\right)}{\\sqrt{(2 \\pi)^{k}|\\mathbf{\\Sigma}|}} $$ Becomes: f_{\\mathbf{X}}\\left(x_{1}, \\ldots, x_{k}\\right)=\\frac{\\exp \\left(-\\frac{1}{2}(\\mathbf{x}-\\boldsymbol{\\mu})^{\\mathrm{T}} \\mathbf{\\Sigma}^{-1}(\\mathbf{x}-\\boldsymbol{\\mu})\\right)}{\\sqrt{(2 \\pi)^{k}|\\mathbf{\\Sigma}|}} f_{\\mathbf{X}}\\left(x_{1}, \\ldots, x_{k}\\right)=\\frac{\\exp \\left(-\\frac{1}{2}(\\mathbf{x}-\\boldsymbol{\\mu})^{\\mathrm{T}} \\mathbf{\\Sigma}^{-1}(\\mathbf{x}-\\boldsymbol{\\mu})\\right)}{\\sqrt{(2 \\pi)^{k}|\\mathbf{\\Sigma}|}} Alternative approaches # There are other dialects of LaTeX (instead of AMS), and other JavaScript rendering libraries you may want to use. In a future version of Foam, we may support KaTeX syntax out of the box, but at this time, these integrations are left as an exercise to the user. Why don't my Math expressions work on my Foam's home page? # If you want the index page of your Foam site to render maths, you'll need to add that to _layouts/home.html as well, or change the layout of the index page to be \"page\" instead of \"home\" by putting this Front Matter on the top of your readme.md/index.md : --- layout: page --- # Your normal title here Reference: How to support latex in github-pages","title":"Math Support"},{"location":"recipes/math-support/#math-support","text":"Published Foam pages don't support math formulas by default. To enable this feature, you can add the following code snippet to the end of _layouts/page.html : < script src = \"https://cdn.jsdelivr.net/npm/mathjax@2/MathJax.js?config=TeX-AMS-MML_HTMLorMML\" type = \"text/javascript\" ></ script > < script type = \"text/x-mathjax-config\" > MathJax . Hub . Config ({ tex2jax : { skipTags : [ 'script' , 'noscript' , 'style' , 'textarea' , 'pre' ], inlineMath : [[ '$' , '$' ]] } }); </ script > This approach uses the MathJax library to render anything delimited by $ (customizable in the snippet above) pairs to inline math and $$ to blocks of math (like a html div tag) using with the AMS-LaTeX dialect embedded within MathJax. Example of inline math using $...$ : $e^{i \\pi}+1=0$ , becomes e^{i \\pi}+1=0 e^{i \\pi}+1=0 Example of a math block using $$...$$ : $$ f_{\\mathbf{X}}\\left(x_{1}, \\ldots, x_{k}\\right)=\\frac{\\exp \\left(-\\frac{1}{2}(\\mathbf{x}-\\boldsymbol{\\mu})^{\\mathrm{T}} \\mathbf{\\Sigma}^{-1}(\\mathbf{x}-\\boldsymbol{\\mu})\\right)}{\\sqrt{(2 \\pi)^{k}|\\mathbf{\\Sigma}|}} $$ Becomes: f_{\\mathbf{X}}\\left(x_{1}, \\ldots, x_{k}\\right)=\\frac{\\exp \\left(-\\frac{1}{2}(\\mathbf{x}-\\boldsymbol{\\mu})^{\\mathrm{T}} \\mathbf{\\Sigma}^{-1}(\\mathbf{x}-\\boldsymbol{\\mu})\\right)}{\\sqrt{(2 \\pi)^{k}|\\mathbf{\\Sigma}|}} f_{\\mathbf{X}}\\left(x_{1}, \\ldots, x_{k}\\right)=\\frac{\\exp \\left(-\\frac{1}{2}(\\mathbf{x}-\\boldsymbol{\\mu})^{\\mathrm{T}} \\mathbf{\\Sigma}^{-1}(\\mathbf{x}-\\boldsymbol{\\mu})\\right)}{\\sqrt{(2 \\pi)^{k}|\\mathbf{\\Sigma}|}}","title":"Math Support"},{"location":"recipes/math-support/#alternative-approaches","text":"There are other dialects of LaTeX (instead of AMS), and other JavaScript rendering libraries you may want to use. In a future version of Foam, we may support KaTeX syntax out of the box, but at this time, these integrations are left as an exercise to the user.","title":"Alternative approaches"},{"location":"recipes/math-support/#why-dont-my-math-expressions-work-on-my-foams-home-page","text":"If you want the index page of your Foam site to render maths, you'll need to add that to _layouts/home.html as well, or change the layout of the index page to be \"page\" instead of \"home\" by putting this Front Matter on the top of your readme.md/index.md : --- layout: page --- # Your normal title here Reference: How to support latex in github-pages","title":"Why don't my Math expressions work on my Foam's home page?"},{"location":"recipes/reference-lists/","text":"Reference Lists # This Recipe is a stub. Use backlinking for handy reference lists: Add links like [[recommendation]], [[book]] etc. Create a page by that name and use its back links to see all todo's, recommendations, etc. Alternatively, highlight the [[link]] and Cmd + Shift + F to find all references without creating a page. todo : materialized-backlinks would be very useful here.","title":"Reference Lists"},{"location":"recipes/reference-lists/#reference-lists","text":"This Recipe is a stub. Use backlinking for handy reference lists: Add links like [[recommendation]], [[book]] etc. Create a page by that name and use its back links to see all todo's, recommendations, etc. Alternatively, highlight the [[link]] and Cmd + Shift + F to find all references without creating a page. todo : materialized-backlinks would be very useful here.","title":"Reference Lists"},{"location":"recipes/shows-image-preview-on-hover/","text":"Shows Image Preview on Hover # Use extension: Image preview to shows image preview in the gutter and on hover It looks like this","title":"Shows Image Preview on Hover"},{"location":"recipes/shows-image-preview-on-hover/#shows-image-preview-on-hover","text":"Use extension: Image preview to shows image preview in the gutter and on hover It looks like this","title":"Shows Image Preview on Hover"},{"location":"recipes/todo/","text":"Todo # Features belong on the roadmap . Write out Roadmap Isolate tasks for MLH fellows Create better structure for Recipes Connect to folks at GitHub Learn more about VS Code Extension APIs Workspace fs/events Reloading changes from outside vscode Expanding, editable snippets For more things to do, check backlinks for Pages that annotate todo .","title":"Todo"},{"location":"recipes/todo/#todo","text":"Features belong on the roadmap . Write out Roadmap Isolate tasks for MLH fellows Create better structure for Recipes Connect to folks at GitHub Learn more about VS Code Extension APIs Workspace fs/events Reloading changes from outside vscode Expanding, editable snippets For more things to do, check backlinks for Pages that annotate todo .","title":"Todo"},{"location":"recipes/unlinked-references/","text":"Unlinked references (stub) # todo This roadmap item needs more specification work. If you're interested in working on it, please start a conversation in GitHub issues . Notes # One of Roam's big features is the ability to find all instances of a reference, create a page for it and update all the references to link to the new page. Implementing this is on the roadmap , but for the time being you can achieve similar things by: Cmd + Shift + F ( Ctrl + Shift + F on Windows ) to find all the references, e.g. \"Cat food\" Cmd + Shift + H ( Ctrl + Shift + F on Windows ) to replace them with [[cat-food]]. Click any of the references to create a new note.","title":"Unlinked references (stub)"},{"location":"recipes/unlinked-references/#unlinked-references-stub","text":"todo This roadmap item needs more specification work. If you're interested in working on it, please start a conversation in GitHub issues .","title":"Unlinked references (stub)"},{"location":"recipes/unlinked-references/#notes","text":"One of Roam's big features is the ability to find all instances of a reference, create a page for it and update all the references to link to the new page. Implementing this is on the roadmap , but for the time being you can achieve similar things by: Cmd + Shift + F ( Ctrl + Shift + F on Windows ) to find all the references, e.g. \"Cat food\" Cmd + Shift + H ( Ctrl + Shift + F on Windows ) to replace them with [[cat-food]]. Click any of the references to create a new note.","title":"Notes"},{"location":"reference/automatic-git-syncing/","text":"Automatic Git Syncing (stub) # todo This roadmap item needs more specification work. If you're interested in working on it, please start a conversation in GitHub issues .","title":"Automatic Git Syncing (stub)"},{"location":"reference/automatic-git-syncing/#automatic-git-syncing-stub","text":"todo This roadmap item needs more specification work. If you're interested in working on it, please start a conversation in GitHub issues .","title":"Automatic Git Syncing (stub)"},{"location":"reference/big-vision/","text":"Big Vision # todo What methodologies do we want to support? Zettelkasten? GTD? (Get Things Done) Digital gardening? Blogging/publishing Others? Be an educational tool as much as a tool to implement these methodologies What use cases are we working towards? - todo User round table","title":"Big Vision"},{"location":"reference/big-vision/#big-vision","text":"todo What methodologies do we want to support? Zettelkasten? GTD? (Get Things Done) Digital gardening? Blogging/publishing Others? Be an educational tool as much as a tool to implement these methodologies What use cases are we working towards? - todo User round table","title":"Big Vision"},{"location":"reference/block-references/","text":"Block References (stub) # todo This roadmap item needs more specification work. If you're interested in working on it, please start a conversation in GitHub issues .","title":"Block References (stub)"},{"location":"reference/block-references/#block-references-stub","text":"todo This roadmap item needs more specification work. If you're interested in working on it, please start a conversation in GitHub issues .","title":"Block References (stub)"},{"location":"reference/blog/","text":"Foam Blog # [[2020-07-11-three-weeks-in]]","title":"Foam Blog"},{"location":"reference/blog/#foam-blog","text":"[[2020-07-11-three-weeks-in]]","title":"Foam Blog"},{"location":"reference/build-vs-assemble/","text":"Build vs Assemble # The Foam prototype is built by assembling third-party extensions, which seems like a good strategy because It supports picking and mixing of tools and workflows Less code to write an maintain But there's also a bunch of roadmap items that are hard to implement this way, as the third party plugins don't do exactly what we want them to do (e.g. Markdown All In One is not compatible with referencing-notes-by-title . Overall, we should strive to build big things from small things. Focused, interoperable modules are better, because they allow users to pick and mix which features work for them. A good example of why this matters is the Markdown All In One extension we rely on: While it provides many of the things we need, a few of its features are incompatible with how I would like to work, and therefore it becomes a limiter of how well I can improve my own workflow. However, there becomes a point where we may benefit from implementing a centralised solution, e.g. a syntax, an extension or perhaps a VSCode language server. As much as possible, we should allow users to operate in a decentralised manner.","title":"Build vs Assemble"},{"location":"reference/build-vs-assemble/#build-vs-assemble","text":"The Foam prototype is built by assembling third-party extensions, which seems like a good strategy because It supports picking and mixing of tools and workflows Less code to write an maintain But there's also a bunch of roadmap items that are hard to implement this way, as the third party plugins don't do exactly what we want them to do (e.g. Markdown All In One is not compatible with referencing-notes-by-title . Overall, we should strive to build big things from small things. Focused, interoperable modules are better, because they allow users to pick and mix which features work for them. A good example of why this matters is the Markdown All In One extension we rely on: While it provides many of the things we need, a few of its features are incompatible with how I would like to work, and therefore it becomes a limiter of how well I can improve my own workflow. However, there becomes a point where we may benefit from implementing a centralised solution, e.g. a syntax, an extension or perhaps a VSCode language server. As much as possible, we should allow users to operate in a decentralised manner.","title":"Build vs Assemble"},{"location":"reference/cli/","text":"Command Line Interface # Create a CLI tool to allow running common Foam commands. These may include: foam init - create a new foam workspace foam janitor - run workspace-janitor in current workspace foam migrate <tool> - migrate from tools like roam exports, obsidian and more More commands to be added.","title":"Command Line Interface"},{"location":"reference/cli/#command-line-interface","text":"Create a CLI tool to allow running common Foam commands. These may include: foam init - create a new foam workspace foam janitor - run workspace-janitor in current workspace foam migrate <tool> - migrate from tools like roam exports, obsidian and more More commands to be added.","title":"Command Line Interface"},{"location":"reference/code-of-conduct/","text":"Code of Conduct # We follow the Contributor Covenant code of conduct. Our Pledge # We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community. Our Standards # Examples of behavior that contributes to a positive environment for our community include: Demonstrating empathy and kindness toward other people Being respectful of differing opinions, viewpoints, and experiences Giving and gracefully accepting constructive feedback Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience Focusing on what is best not just for us as individuals, but for the overall community Examples of unacceptable behavior include: The use of sexualized language or imagery, and sexual attention or advances of any kind Trolling, insulting or derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or email address, without their explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Enforcement Responsibilities # Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful. Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate. Scope # This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Enforcement # Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at jani.evakallio+foam@gmail.com . All complaints will be reviewed and investigated promptly and fairly. All community leaders are obligated to respect the privacy and security of the reporter of any incident. Enforcement Guidelines # Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct: 1. Correction # Community Impact : Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community. Consequence : A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested. 2. Warning # Community Impact : A violation through a single incident or series of actions. Consequence : A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban. 3. Temporary Ban # Community Impact : A serious violation of community standards, including sustained inappropriate behavior. Consequence : A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban. 4. Permanent Ban # Community Impact : Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals. Consequence : A permanent ban from any sort of public interaction within the community. Attribution # This Code of Conduct is adapted from the Contributor Covenant , version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html . Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder . For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq . Translations are available at https://www.contributor-covenant.org/translations .","title":"Code of Conduct"},{"location":"reference/code-of-conduct/#code-of-conduct","text":"We follow the Contributor Covenant code of conduct.","title":"Code of Conduct"},{"location":"reference/code-of-conduct/#our-pledge","text":"We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.","title":"Our Pledge"},{"location":"reference/code-of-conduct/#our-standards","text":"Examples of behavior that contributes to a positive environment for our community include: Demonstrating empathy and kindness toward other people Being respectful of differing opinions, viewpoints, and experiences Giving and gracefully accepting constructive feedback Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience Focusing on what is best not just for us as individuals, but for the overall community Examples of unacceptable behavior include: The use of sexualized language or imagery, and sexual attention or advances of any kind Trolling, insulting or derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or email address, without their explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"reference/code-of-conduct/#enforcement-responsibilities","text":"Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful. Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.","title":"Enforcement Responsibilities"},{"location":"reference/code-of-conduct/#scope","text":"This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.","title":"Scope"},{"location":"reference/code-of-conduct/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at jani.evakallio+foam@gmail.com . All complaints will be reviewed and investigated promptly and fairly. All community leaders are obligated to respect the privacy and security of the reporter of any incident.","title":"Enforcement"},{"location":"reference/code-of-conduct/#enforcement-guidelines","text":"Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:","title":"Enforcement Guidelines"},{"location":"reference/code-of-conduct/#1-correction","text":"Community Impact : Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community. Consequence : A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.","title":"1. Correction"},{"location":"reference/code-of-conduct/#2-warning","text":"Community Impact : A violation through a single incident or series of actions. Consequence : A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.","title":"2. Warning"},{"location":"reference/code-of-conduct/#3-temporary-ban","text":"Community Impact : A serious violation of community standards, including sustained inappropriate behavior. Consequence : A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.","title":"3. Temporary Ban"},{"location":"reference/code-of-conduct/#4-permanent-ban","text":"Community Impact : Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals. Consequence : A permanent ban from any sort of public interaction within the community.","title":"4. Permanent Ban"},{"location":"reference/code-of-conduct/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html . Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder . For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq . Translations are available at https://www.contributor-covenant.org/translations .","title":"Attribution"},{"location":"reference/contributing/","text":"Contributing # Head over to the contribution-guide . CONTRIBUTING.md file name is blocklisted on GitHub pages, and doesn't appear in the rendered output .","title":"Contributing"},{"location":"reference/contributing/#contributing","text":"Head over to the contribution-guide . CONTRIBUTING.md file name is blocklisted on GitHub pages, and doesn't appear in the rendered output .","title":"Contributing"},{"location":"reference/creating-a-new-language/","text":"Creating a New Language # Creating a new language # What if we created a new language that made it more ergonomic to use VS Code as a Foam workspace Based on markdown Could leverage mdx? Shortcuts, like links between pages Downside: Not markdown compatible, not so good for other tools Could it be a markdown superset? Or a language that transpiles to markdown and back, so it can be edited in \"Foam\" format and committed in MD so it's viewable on GH as markdown How imporant is it that links are navigable on GH? I guess it is","title":"Creating a New Language"},{"location":"reference/creating-a-new-language/#creating-a-new-language","text":"","title":"Creating a New Language"},{"location":"reference/creating-a-new-language/#creating-a-new-language_1","text":"What if we created a new language that made it more ergonomic to use VS Code as a Foam workspace Based on markdown Could leverage mdx? Shortcuts, like links between pages Downside: Not markdown compatible, not so good for other tools Could it be a markdown superset? Or a language that transpiles to markdown and back, so it can be edited in \"Foam\" format and committed in MD so it's viewable on GH as markdown How imporant is it that links are navigable on GH? I guess it is","title":"Creating a new language"},{"location":"reference/custom-snippets/","text":"Adding Custom Snippets # You can add custom snippets whilst the default set of snippets are decided by following the below steps: Cmd + Shift + P ( Ctrl + Shift + P for Windows), type snippets and select Preferences: Configure User Snippets . The command palette will remain in focus. Search for markdown and select the entry entitled markdown.json (Markdown) . A JSON file will open. You can author your own snippets using the documentation to help you, or if you're using a snippet shared by another Foam user then you can copy and paste it in, as the below GIF demonstrates: To get started, you might consider replacing the entire contents of the markdown.json file opened by the steps above with the JSON in this comment .","title":"Adding Custom Snippets"},{"location":"reference/custom-snippets/#adding-custom-snippets","text":"You can add custom snippets whilst the default set of snippets are decided by following the below steps: Cmd + Shift + P ( Ctrl + Shift + P for Windows), type snippets and select Preferences: Configure User Snippets . The command palette will remain in focus. Search for markdown and select the entry entitled markdown.json (Markdown) . A JSON file will open. You can author your own snippets using the documentation to help you, or if you're using a snippet shared by another Foam user then you can copy and paste it in, as the below GIF demonstrates: To get started, you might consider replacing the entire contents of the markdown.json file opened by the steps above with the JSON in this comment .","title":"Adding Custom Snippets"},{"location":"reference/decision-needed/","text":"Decision Needed # Check backlinks","title":"Decision Needed"},{"location":"reference/decision-needed/#decision-needed","text":"Check backlinks","title":"Decision Needed"},{"location":"reference/decision/","text":"Decision #","title":"Decision"},{"location":"reference/decision/#decision","text":"","title":"Decision"},{"location":"reference/feature-comparison/","text":"Feature comparison # In order to understand what is needed, would be good to have a comparison.","title":"Feature comparison"},{"location":"reference/feature-comparison/#feature-comparison","text":"In order to understand what is needed, would be good to have a comparison.","title":"Feature comparison"},{"location":"reference/foam-core/","text":"Foam Core # foam-core is a (future) package that powers the core functionality in Foam across all platforms: VS Code Extension workspace-janitor cli Future initiatives Visualizations Tag clouds Graph Should we have a package for visualisation? build-vs-assemble Not everything needs to live in the Foam repo Web based UI (Monaco) foam-core 's primary responsibility is to build an API on top of a workspace of markdown files, which allows us to: Treat files as a graph, based on links Can be either wiki-links or relative [markdown](links.md) style We need to know about the edges (connections) as well as nodes What link points to what other file, etc. Needs to have the exact link text, e.g. even if [[some-page]] or [[some-page.md]] or [[Some Page]] point to the same document ( ./some-page.md ), we need to know which format was used, so link-reference-definitions can be generated correctly Treat each file as semi-structured data Title, headings, lists, paragraphs, images, links, data, code Also, possible Foam-specific meta stuff, like \"backlinks\" or \"block references\". This can power advanced search features (e.g. showing entire context of paragraph in back links, find all documents) Ideally, foam-core will be generic enough that in can be used by third parties to build their own tools that operate on markdown directories. Technical requirements # The graph should be relatively inexpensive to compute (for running in CI, mobile etc) If necessary, we can implement caching inside a dot folder, but ideally not In memory cache already exist, can prime from disk if needed The graph should be mutable (or immutable but easy to deep clone) so that persistent processes (VS Code) can cheaply update it when Document content changes Links update -> Graph change Heading changes -> Metadata change Anything in the document changes, update AST for individual note Files are added Files are removed Files are renamed Aliasing, call the same thing by multiple names Doesn't exist yet, should we support? The graph should be observable (EventEmitter?) so changes can be applied EventEmitter w/ cross platform dependency Wonka (staltz's callbag) Can be a long term goal Short term fix: Just run the build fully on every change Ideally, the it should accept file/structure changes from the outside from some sort of event source, so we can decouple source of updates (VS Code Workspace events, file system events...) If this gets complicated, we can delay this for now We should not take on platform-specific dependencies Should work in any JS environment Written in TypeScript (preferably tsdx) Published to NPM Use cases # Here are some example use cases that the core should support. They don't need to be built into the core, but may help us design correct solutions: Adding and editing page content materialized-backlinks link-reference-definitions for wiki-links Frontmatter Finding all documents with #tag Finding all documents with instances of [[link]] Visualisations Full text search Or, if search is too expensive/complex, when given a list of file names and line/column positions from VS Code search API, can return the document context (e.g. full paragraph, preceding/following line etc) Collaboration # This week List of things to work in order Provide more vision on future state Write about working and collaboration philosophy todo Prioritise roadmap Week of July 13 Jani is available full time to work on this Janne: Write proposals, maybe more Riccardo: Available Configuration management # Other tools may not be able to use vscode todo Discuss with Janne and Riccardo Feature comparison # Useful for knowing what needs to be supported. See feature-comparison . Meeting notes # foam-core-2020-07-11","title":"Foam Core"},{"location":"reference/foam-core/#foam-core","text":"foam-core is a (future) package that powers the core functionality in Foam across all platforms: VS Code Extension workspace-janitor cli Future initiatives Visualizations Tag clouds Graph Should we have a package for visualisation? build-vs-assemble Not everything needs to live in the Foam repo Web based UI (Monaco) foam-core 's primary responsibility is to build an API on top of a workspace of markdown files, which allows us to: Treat files as a graph, based on links Can be either wiki-links or relative [markdown](links.md) style We need to know about the edges (connections) as well as nodes What link points to what other file, etc. Needs to have the exact link text, e.g. even if [[some-page]] or [[some-page.md]] or [[Some Page]] point to the same document ( ./some-page.md ), we need to know which format was used, so link-reference-definitions can be generated correctly Treat each file as semi-structured data Title, headings, lists, paragraphs, images, links, data, code Also, possible Foam-specific meta stuff, like \"backlinks\" or \"block references\". This can power advanced search features (e.g. showing entire context of paragraph in back links, find all documents) Ideally, foam-core will be generic enough that in can be used by third parties to build their own tools that operate on markdown directories.","title":"Foam Core"},{"location":"reference/foam-core/#technical-requirements","text":"The graph should be relatively inexpensive to compute (for running in CI, mobile etc) If necessary, we can implement caching inside a dot folder, but ideally not In memory cache already exist, can prime from disk if needed The graph should be mutable (or immutable but easy to deep clone) so that persistent processes (VS Code) can cheaply update it when Document content changes Links update -> Graph change Heading changes -> Metadata change Anything in the document changes, update AST for individual note Files are added Files are removed Files are renamed Aliasing, call the same thing by multiple names Doesn't exist yet, should we support? The graph should be observable (EventEmitter?) so changes can be applied EventEmitter w/ cross platform dependency Wonka (staltz's callbag) Can be a long term goal Short term fix: Just run the build fully on every change Ideally, the it should accept file/structure changes from the outside from some sort of event source, so we can decouple source of updates (VS Code Workspace events, file system events...) If this gets complicated, we can delay this for now We should not take on platform-specific dependencies Should work in any JS environment Written in TypeScript (preferably tsdx) Published to NPM","title":"Technical requirements"},{"location":"reference/foam-core/#use-cases","text":"Here are some example use cases that the core should support. They don't need to be built into the core, but may help us design correct solutions: Adding and editing page content materialized-backlinks link-reference-definitions for wiki-links Frontmatter Finding all documents with #tag Finding all documents with instances of [[link]] Visualisations Full text search Or, if search is too expensive/complex, when given a list of file names and line/column positions from VS Code search API, can return the document context (e.g. full paragraph, preceding/following line etc)","title":"Use cases"},{"location":"reference/foam-core/#collaboration","text":"This week List of things to work in order Provide more vision on future state Write about working and collaboration philosophy todo Prioritise roadmap Week of July 13 Jani is available full time to work on this Janne: Write proposals, maybe more Riccardo: Available","title":"Collaboration"},{"location":"reference/foam-core/#configuration-management","text":"Other tools may not be able to use vscode todo Discuss with Janne and Riccardo","title":"Configuration management"},{"location":"reference/foam-core/#feature-comparison","text":"Useful for knowing what needs to be supported. See feature-comparison .","title":"Feature comparison"},{"location":"reference/foam-core/#meeting-notes","text":"foam-core-2020-07-11","title":"Meeting notes"},{"location":"reference/foam-file-format/","text":"Foam File Format # This file is an example of a valid Foam file. Essentially it's just a markdown file with a bit of additional support for mediawiki-style [wiki-links](../wiki-links.md) . Here are a few specific constraints, mainly because our tooling is a bit fragmented. Most of these should be eventually lifted, and our requirement should just be \"Markdown with [wiki-links](../wiki-links.md) : It needs to have a single top level # Heading . This will be used as document title. decision-needed Do we need it? decision-needed How much to deviate from just markdown File name should not contain spaces, e.g. foam-file-format.md is a valid name, but Foam File Format.md is not. This is a temporary limitation and will be lifted in future versions. Technically this actually works already, but may have some edge cases you don't want to deal with if you can avoid it. File name should have extension .md or .markdown This is a temporary limitation and will be lifted in future versions. At least .mdx will be supported, but ideally we'll support any file that you can map to Markdown language mode in VS Code In addition to normal Markdown Links syntax you can use [[media-wiki]] links. See wiki-links for more details.","title":"Foam File Format"},{"location":"reference/foam-file-format/#foam-file-format","text":"This file is an example of a valid Foam file. Essentially it's just a markdown file with a bit of additional support for mediawiki-style [wiki-links](../wiki-links.md) . Here are a few specific constraints, mainly because our tooling is a bit fragmented. Most of these should be eventually lifted, and our requirement should just be \"Markdown with [wiki-links](../wiki-links.md) : It needs to have a single top level # Heading . This will be used as document title. decision-needed Do we need it? decision-needed How much to deviate from just markdown File name should not contain spaces, e.g. foam-file-format.md is a valid name, but Foam File Format.md is not. This is a temporary limitation and will be lifted in future versions. Technically this actually works already, but may have some edge cases you don't want to deal with if you can avoid it. File name should have extension .md or .markdown This is a temporary limitation and will be lifted in future versions. At least .mdx will be supported, but ideally we'll support any file that you can map to Markdown language mode in VS Code In addition to normal Markdown Links syntax you can use [[media-wiki]] links. See wiki-links for more details.","title":"Foam File Format"},{"location":"reference/foam-linter/","text":"Foam Linter (stub) # todo This roadmap item needs more specification work. If you're interested in working on it, please start a conversation in GitHub issues .","title":"Foam Linter (stub)"},{"location":"reference/foam-linter/#foam-linter-stub","text":"todo This roadmap item needs more specification work. If you're interested in working on it, please start a conversation in GitHub issues .","title":"Foam Linter (stub)"},{"location":"reference/git-flows-for-teams/","text":"Git Flows for Teams (stub) # todo This roadmap item needs more specification work. If you're interested in working on it, please start a conversation in GitHub issues .","title":"Git Flows for Teams (stub)"},{"location":"reference/git-flows-for-teams/#git-flows-for-teams-stub","text":"todo This roadmap item needs more specification work. If you're interested in working on it, please start a conversation in GitHub issues .","title":"Git Flows for Teams (stub)"},{"location":"reference/graph-in-published-workspace/","text":"Graph in Published Workspace (stub) # todo This roadmap item needs more specification work. If you're interested in working on it, please start a conversation in GitHub issues .","title":"Graph in Published Workspace (stub)"},{"location":"reference/graph-in-published-workspace/#graph-in-published-workspace-stub","text":"todo This roadmap item needs more specification work. If you're interested in working on it, please start a conversation in GitHub issues .","title":"Graph in Published Workspace (stub)"},{"location":"reference/improve-default-workspace-settings/","text":"Improve Default Workspace Settings (stub) # todo This roadmap item needs more specification work. If you're interested in working on it, please start a conversation in GitHub issues .","title":"Improve Default Workspace Settings (stub)"},{"location":"reference/improve-default-workspace-settings/#improve-default-workspace-settings-stub","text":"todo This roadmap item needs more specification work. If you're interested in working on it, please start a conversation in GitHub issues .","title":"Improve Default Workspace Settings (stub)"},{"location":"reference/improved-backlinking/","text":"Improved Backlinking (stub) # todo This roadmap item needs more specification work. If you're interested in working on it, please start a conversation in GitHub issues .","title":"Improved Backlinking (stub)"},{"location":"reference/improved-backlinking/#improved-backlinking-stub","text":"todo This roadmap item needs more specification work. If you're interested in working on it, please start a conversation in GitHub issues .","title":"Improved Backlinking (stub)"},{"location":"reference/improved-static-site-generation/","text":"Improved Static Site Generation (stub) # todo This roadmap item needs more specification work. If you're interested in working on it, please start a conversation in GitHub issues . Notes # We should consider moving to gatsby, similar to Foam Gatsby Template","title":"Improved Static Site Generation (stub)"},{"location":"reference/improved-static-site-generation/#improved-static-site-generation-stub","text":"todo This roadmap item needs more specification work. If you're interested in working on it, please start a conversation in GitHub issues .","title":"Improved Static Site Generation (stub)"},{"location":"reference/improved-static-site-generation/#notes","text":"We should consider moving to gatsby, similar to Foam Gatsby Template","title":"Notes"},{"location":"reference/inbox/","text":"Inbox # Uncategorised thoughts, to be added Release notes Markdown Preview It's possible to customise the markdown preview styling. Maybe make it use local foam workspace styles for live preview of the site?? See: https://marketplace.visualstudio.com/items?itemName=bierner.markdown-preview-github-styles Use VS Code CodeTour for onboarding Investigate other similar extensions: Unotes vscode-memo gistpad wiki Open in Foam When you want to open a Foam published website in your own VS Code, we could have a \"Open in Foam\" link that opens the link in VS Code via a url binding (if possible), downloads the github repo locally, and opens it as a Foam workspace. Every Foam could have a different theme even in the editor, so you'll see it like they see it UI and layout design of your workspace can become a thing Developer documentation GistPad has a good vs code contrib primer: https://github.com/jevakallio/gistpad/blob/master/CONTRIBUTING.md VS Code Notebooks API https://code.visualstudio.com/api/extension-guides/notebook Snippets in template Foam as a (VS Code) language Syntax highlighting Snippets Future architecture Could we do publish-related settings as a pre-push git hook, e.g. generating footnote labels Running them on Github Actions to edit stuff as it comes in Ideally, we shouldn't have to touch files, should be just markdown Looking at the errors/warnings/output panes makes me think, what kind of automated quality tools could we write. Deduplication, finding similarities... Thought Debugger? Knowledge Debugger? Janitor? Gardener? Foam Compiler? Should support Netlify deploys out of the box Foam should tick at the same frequency as your brain, and the Foam graph you build should match the mental model you have in your head, making navigation effortless. Maps have persistent topologies. As the graph grows, you should be able to visualise where an idea belongs. Maybe a literal map? And island? A DeckGL visualisation? Write about the history and process of Foam In ways, Wallet was the first iteration of Foam-like environment Should we support directories? Some tools might get more complicated to build The pressure to categorize and create hierachies can become distracting Is there value in folderizing? Use case: Writing docs in a codebase Testing: This file is served from the /docs directory.","title":"Inbox"},{"location":"reference/inbox/#inbox","text":"Uncategorised thoughts, to be added Release notes Markdown Preview It's possible to customise the markdown preview styling. Maybe make it use local foam workspace styles for live preview of the site?? See: https://marketplace.visualstudio.com/items?itemName=bierner.markdown-preview-github-styles Use VS Code CodeTour for onboarding Investigate other similar extensions: Unotes vscode-memo gistpad wiki Open in Foam When you want to open a Foam published website in your own VS Code, we could have a \"Open in Foam\" link that opens the link in VS Code via a url binding (if possible), downloads the github repo locally, and opens it as a Foam workspace. Every Foam could have a different theme even in the editor, so you'll see it like they see it UI and layout design of your workspace can become a thing Developer documentation GistPad has a good vs code contrib primer: https://github.com/jevakallio/gistpad/blob/master/CONTRIBUTING.md VS Code Notebooks API https://code.visualstudio.com/api/extension-guides/notebook Snippets in template Foam as a (VS Code) language Syntax highlighting Snippets Future architecture Could we do publish-related settings as a pre-push git hook, e.g. generating footnote labels Running them on Github Actions to edit stuff as it comes in Ideally, we shouldn't have to touch files, should be just markdown Looking at the errors/warnings/output panes makes me think, what kind of automated quality tools could we write. Deduplication, finding similarities... Thought Debugger? Knowledge Debugger? Janitor? Gardener? Foam Compiler? Should support Netlify deploys out of the box Foam should tick at the same frequency as your brain, and the Foam graph you build should match the mental model you have in your head, making navigation effortless. Maps have persistent topologies. As the graph grows, you should be able to visualise where an idea belongs. Maybe a literal map? And island? A DeckGL visualisation? Write about the history and process of Foam In ways, Wallet was the first iteration of Foam-like environment Should we support directories? Some tools might get more complicated to build The pressure to categorize and create hierachies can become distracting Is there value in folderizing? Use case: Writing docs in a codebase Testing: This file is served from the /docs directory.","title":"Inbox"},{"location":"reference/key-bindings/","text":"Key Bindings # todo # Document supported key bindings Currently we rely on various key bindings provided by VS Code plugins. Would be nice to harmonise these [ ]","title":"Key Bindings"},{"location":"reference/key-bindings/#key-bindings","text":"","title":"Key Bindings"},{"location":"reference/key-bindings/#todo","text":"Document supported key bindings Currently we rely on various key bindings provided by VS Code plugins. Would be nice to harmonise these [ ]","title":"todo"},{"location":"reference/known-issues/","text":"Known Issues # Aggressive autocompletion in Markdown files. You can turn editor.quickSuggestions off in [.vscode/settings.json]. Reference link lists have multiple issues ( Foam for VSCode ) Reference lists don't update in the background when other files are changed Notes don't get removed from reference lists when notes are deleted/renamed Workaround: Restart VS Code Links are case-sensitive (should not be) graph-visualisation does not detect with wiki-links ( Markdown Links ) wiki-links aren't searchable on website This is because the link styling hack in assets/css/style.scss","title":"Known Issues"},{"location":"reference/known-issues/#known-issues","text":"Aggressive autocompletion in Markdown files. You can turn editor.quickSuggestions off in [.vscode/settings.json]. Reference link lists have multiple issues ( Foam for VSCode ) Reference lists don't update in the background when other files are changed Notes don't get removed from reference lists when notes are deleted/renamed Workaround: Restart VS Code Links are case-sensitive (should not be) graph-visualisation does not detect with wiki-links ( Markdown Links ) wiki-links aren't searchable on website This is because the link styling hack in assets/css/style.scss","title":"Known Issues"},{"location":"reference/link-reference-definition-improvements/","text":"Link Reference Definition Improvements # Current Problems # File-by-file Insertion # For the time being, if you want to get wiki-links into all files within the workspace, you'll need to generate the link reference definitions yourself file-by-file (with the assistance of Foam). Wikilinks don't work on GitHub # TL;DR; workaround in the end of the chapter. If you click any of the wiki-links on GitHub web UI (such as the README.md of a project), you'll notice that the links break with a 404 error. At the time of writing (June 28 2020) this is a known, but unsolved error. To understand why this is the case, we need to understand what we are trading off. So, why don't they work on GitHub? The three components of link-reference-definitions are link label, link destination and Link Title. The issue is the middle link destination component. It's configured to point to the file name without file extension , i.e. \"file-name\" instead of \"file-name.md\". This is to make the GitHub Pages rendering work, because if we generated the links to file-name.md , the links would point to the raw markdown files instead of their generated HTML versions. Environment file-name file-name.md VS Code Works Works GitHub pages Works Breaks GitHub UI Breaks Works So as you can see, we've prioritised GitHub Pages over GitHub Web UI for the time being. Ideally, we'd like a solution that works with both, but it's not defined yet (see link-reference-definitions for more details) Workaround # For the time being, you can use relative [markdown links](markdown-link.md) syntax. Pros: This will work on all platforms. Cons: It will break the Markdown Notes backlinking support Less convenient to write Finding certain words clutter the VS Code search results # Since link reference definitions have [//begin] and [//end] guards with explanatory text that use certain words, these words (like \"generate\") appear in VS Code search results if you happen to search matching strings from the workspace. Improvement Proposal # Problem space in essence: During edit-time (when modifying the markdown files in an editor) link reference definitions are needed if user uses editor extensions that don't understand wikilinks link reference definitions may be annoying since they add content to files that the user hasn't typed in by themselves get out of date if user uses a tool that doesn't autogenerate them may clutter the search results During build-time (when converting markdown to html for publishing purposes) link reference definitions are needed, if the files are published via such tools (or to such platforms) that don't understand wikilinks link reference definitions might have to be in different formats depending on the publish target (e.g. Github pages vs Github UI) The potential solution: For edit-time Make edit-time link reference definition generation optional via user settings. They should be on by default, and generating valid markdown links with a relative path to a .md file. Make format of the link reference definition configurable (whether to include '.md' or not) Out of recommended extensions, currently only \"markdown links\" doesn't support them (?). However even its code seems to include wikilink parser, so it might just be a bug? For build-time To satisfy mutually incompatible constraints between GitHub UI, VSCode UI, and GitHub Pages, we should add a pre-processing/build step for pushing to GitHub Pages. This would be a GitHub action (or a local script, ran via foam-cli) that outputs publish-friendly markdown format for static site generators and other publishing tools This build step should be pluggable, so that other transformations could be ran during it Have publish targets defined in settings, that support both turning the link reference definitions on/off and defining their format (.md or not). Example draft (including also edit-time aspect): // settings json // see enumerations below for explanations on values { \"foam\" : { \"publish\" : [ { \"name\" : \"Gitlab Mirror\" , // name of the publish target \"linkTranspilation\" : \"Off\" , \"linkReferenceDefinitions\" : \"withExtensions\" }, { \"name\" : \"GitHub Pages\" , \"linkTranspilation\" : \"Off\" , \"linkReferenceDefinitions\" : \"withoutExtensions\" }, { \"name\" : \"Blog\" , \"linkTranspilation\" : \"Off\" , \"linkReferenceDefinitions\" : \"Off\" }, { \"name\" : \"My Amazing PDF book\" , \"linkTranspilation\" : \"WikiLinksToMarkdown\" } ], \"edit\" : { \"linkReferenceDefinitions\" : \"Off\" } } } // Defines if and how links in markdown files are somehow converted (in-place) during build time // Note that this enumeration is not valid edit-time, since we (probably) don't want to change text like this while user is editing it enum LinkTranspilation { Off , // links are not transpiled WikiLinksToMarkdown , // links using wiki-format [[link]] are converted to normal md links: [link](./some/file.md) // if this is set, not link reference definitions are generated (not needed) } // Defines if and how link reference definition section is generated enum LinkReferenceDefinitions { Off , // link reference definitions are not generated WithExtensions , // link reference definitions contain .md (or similar) file extensions WithoutExtensions // link reference definitions do not contain file extenions } With Foam repo, just use edit-time link reference definitions with '.md' extension - this makes the links work in the Github UI Have publish target defined for Github pages, that doesn't use '.md' extension, but still has the link reference definitions. Generate the output into gh-pages branch (or separate repo) with automation. This naturally requires first removing the existing link reference definitions during the build Other To clean up the search results, remove link reference definition section guards (assuming that these are not defined by the markdown spec). Use unifiedjs parse trees to identify if there's missing (or surplus) definitions (check if they are identified properly by the library), and just add the needed definitions to the bottom of the file (without guards) AND remove them if they are not needed (anywhere from the file). Note that the proposal above supports both (build-time) inline transpilation of wikilinks as well as creation reference definitions. Depending on the direction of Foam, also only one of them could be selected. In that case the other could be implemented at later point of time. UI-wise, the publish targets could be picked in some similar fashion as the run/debug targets in vscode by implementing a separate panel, or maybe through command execution (CTRL+SHIFT+P) - not yet defined at this point. Links # tracking issue on GitHub","title":"Link Reference Definition Improvements"},{"location":"reference/link-reference-definition-improvements/#link-reference-definition-improvements","text":"","title":"Link Reference Definition Improvements"},{"location":"reference/link-reference-definition-improvements/#current-problems","text":"","title":"Current Problems"},{"location":"reference/link-reference-definition-improvements/#file-by-file-insertion","text":"For the time being, if you want to get wiki-links into all files within the workspace, you'll need to generate the link reference definitions yourself file-by-file (with the assistance of Foam).","title":"File-by-file Insertion"},{"location":"reference/link-reference-definition-improvements/#wikilinks-dont-work-on-github","text":"TL;DR; workaround in the end of the chapter. If you click any of the wiki-links on GitHub web UI (such as the README.md of a project), you'll notice that the links break with a 404 error. At the time of writing (June 28 2020) this is a known, but unsolved error. To understand why this is the case, we need to understand what we are trading off. So, why don't they work on GitHub? The three components of link-reference-definitions are link label, link destination and Link Title. The issue is the middle link destination component. It's configured to point to the file name without file extension , i.e. \"file-name\" instead of \"file-name.md\". This is to make the GitHub Pages rendering work, because if we generated the links to file-name.md , the links would point to the raw markdown files instead of their generated HTML versions. Environment file-name file-name.md VS Code Works Works GitHub pages Works Breaks GitHub UI Breaks Works So as you can see, we've prioritised GitHub Pages over GitHub Web UI for the time being. Ideally, we'd like a solution that works with both, but it's not defined yet (see link-reference-definitions for more details)","title":"Wikilinks don't work on GitHub"},{"location":"reference/link-reference-definition-improvements/#workaround","text":"For the time being, you can use relative [markdown links](markdown-link.md) syntax. Pros: This will work on all platforms. Cons: It will break the Markdown Notes backlinking support Less convenient to write","title":"Workaround"},{"location":"reference/link-reference-definition-improvements/#finding-certain-words-clutter-the-vs-code-search-results","text":"Since link reference definitions have [//begin] and [//end] guards with explanatory text that use certain words, these words (like \"generate\") appear in VS Code search results if you happen to search matching strings from the workspace.","title":"Finding certain words clutter the VS Code search results"},{"location":"reference/link-reference-definition-improvements/#improvement-proposal","text":"Problem space in essence: During edit-time (when modifying the markdown files in an editor) link reference definitions are needed if user uses editor extensions that don't understand wikilinks link reference definitions may be annoying since they add content to files that the user hasn't typed in by themselves get out of date if user uses a tool that doesn't autogenerate them may clutter the search results During build-time (when converting markdown to html for publishing purposes) link reference definitions are needed, if the files are published via such tools (or to such platforms) that don't understand wikilinks link reference definitions might have to be in different formats depending on the publish target (e.g. Github pages vs Github UI) The potential solution: For edit-time Make edit-time link reference definition generation optional via user settings. They should be on by default, and generating valid markdown links with a relative path to a .md file. Make format of the link reference definition configurable (whether to include '.md' or not) Out of recommended extensions, currently only \"markdown links\" doesn't support them (?). However even its code seems to include wikilink parser, so it might just be a bug? For build-time To satisfy mutually incompatible constraints between GitHub UI, VSCode UI, and GitHub Pages, we should add a pre-processing/build step for pushing to GitHub Pages. This would be a GitHub action (or a local script, ran via foam-cli) that outputs publish-friendly markdown format for static site generators and other publishing tools This build step should be pluggable, so that other transformations could be ran during it Have publish targets defined in settings, that support both turning the link reference definitions on/off and defining their format (.md or not). Example draft (including also edit-time aspect): // settings json // see enumerations below for explanations on values { \"foam\" : { \"publish\" : [ { \"name\" : \"Gitlab Mirror\" , // name of the publish target \"linkTranspilation\" : \"Off\" , \"linkReferenceDefinitions\" : \"withExtensions\" }, { \"name\" : \"GitHub Pages\" , \"linkTranspilation\" : \"Off\" , \"linkReferenceDefinitions\" : \"withoutExtensions\" }, { \"name\" : \"Blog\" , \"linkTranspilation\" : \"Off\" , \"linkReferenceDefinitions\" : \"Off\" }, { \"name\" : \"My Amazing PDF book\" , \"linkTranspilation\" : \"WikiLinksToMarkdown\" } ], \"edit\" : { \"linkReferenceDefinitions\" : \"Off\" } } } // Defines if and how links in markdown files are somehow converted (in-place) during build time // Note that this enumeration is not valid edit-time, since we (probably) don't want to change text like this while user is editing it enum LinkTranspilation { Off , // links are not transpiled WikiLinksToMarkdown , // links using wiki-format [[link]] are converted to normal md links: [link](./some/file.md) // if this is set, not link reference definitions are generated (not needed) } // Defines if and how link reference definition section is generated enum LinkReferenceDefinitions { Off , // link reference definitions are not generated WithExtensions , // link reference definitions contain .md (or similar) file extensions WithoutExtensions // link reference definitions do not contain file extenions } With Foam repo, just use edit-time link reference definitions with '.md' extension - this makes the links work in the Github UI Have publish target defined for Github pages, that doesn't use '.md' extension, but still has the link reference definitions. Generate the output into gh-pages branch (or separate repo) with automation. This naturally requires first removing the existing link reference definitions during the build Other To clean up the search results, remove link reference definition section guards (assuming that these are not defined by the markdown spec). Use unifiedjs parse trees to identify if there's missing (or surplus) definitions (check if they are identified properly by the library), and just add the needed definitions to the bottom of the file (without guards) AND remove them if they are not needed (anywhere from the file). Note that the proposal above supports both (build-time) inline transpilation of wikilinks as well as creation reference definitions. Depending on the direction of Foam, also only one of them could be selected. In that case the other could be implemented at later point of time. UI-wise, the publish targets could be picked in some similar fashion as the run/debug targets in vscode by implementing a separate panel, or maybe through command execution (CTRL+SHIFT+P) - not yet defined at this point.","title":"Improvement Proposal"},{"location":"reference/link-reference-definition-improvements/#links","text":"tracking issue on GitHub","title":"Links"},{"location":"reference/link-reference-definitions/","text":"Link Reference Definitions # Introduction # When you use [wiki-links](../wiki-links.md) , the foam-vscode extension will automatically generate Markdown Link Reference Definitions at the bottom of the file. This is done to make the content of the file compatible with various Markdown tools (e.g. parsers, static site generators, VS code plugins etc), which don't support [wiki-links](../wiki-links.md) . Example # The following example: - [ wiki-links ]( ../wiki-links.md ) - [ github-pages ]( ../recipes/github-pages.md ) ...generates the following link reference definitions to the bottom of the file: [ wiki-links ]: wiki-links \"Wiki Links\" [ github-pages ]: github-pages \"Github Pages\" You can open the raw markdown to see them at the bottom of this file Specification # The three components of a link reference definition are [link-label]: link-target \"Link Title\" link label: The link text to match in the surrounding markdown document. This matches the inner bracket of the double-bracketed [[wiki-link]] notation link destination The target of the matched link By default we generate links without extension. This can be overridden, see Configuration below \"Link Title\" Optional title for link (The Foam template has a snippet of JavaScript to replace this on the website at runtime) Configuration # You can choose to generate link reference definitions with or without file extensions, depending on the target. As a rule of thumb: Links with file extensions work better with standard markdown-based tools, such as GitHub web UI. Links without file extensions work better with certain web publishing tools that treat links as literal urls and don't transform them automatically, such as the standard GitHub pages installation. By default, Foam generates links without file extensions for legacy reasons, but this may change in future versions. You can override this setting in your Foam workspace's settings.json : \"foam.edit.linkReferenceDefinitions\": \"withoutExtensions\" (default) \"foam.edit.linkReferenceDefinitions\": \"withExtensions\" Ignoring files # Sometimes, you may want to ignore certain files or folders, so that Foam doesn't generate link reference definitions to them. For instance, if you're using a local instance of Jekyll , you may find that it writes copies of each .md file into a _site directory, which may lead to Foam generating references to them instead of the original source notes. You can ignore the _site directory by adding the following to your .vscode/settings.json : \"files.exclude\" : { \"**/_site\" : true } , \"files.watcherExclude\" : { \"**/_site\" : true } , After changing the setting in your workspace, you can run the workspace-janitor command to convert all existing definitions. Todo _Implement a `foam.eclude Future improvements # See link-reference-definition-improvements for further discussion on current problems and potential solutions.","title":"Link Reference Definitions"},{"location":"reference/link-reference-definitions/#link-reference-definitions","text":"","title":"Link Reference Definitions"},{"location":"reference/link-reference-definitions/#introduction","text":"When you use [wiki-links](../wiki-links.md) , the foam-vscode extension will automatically generate Markdown Link Reference Definitions at the bottom of the file. This is done to make the content of the file compatible with various Markdown tools (e.g. parsers, static site generators, VS code plugins etc), which don't support [wiki-links](../wiki-links.md) .","title":"Introduction"},{"location":"reference/link-reference-definitions/#example","text":"The following example: - [ wiki-links ]( ../wiki-links.md ) - [ github-pages ]( ../recipes/github-pages.md ) ...generates the following link reference definitions to the bottom of the file: [ wiki-links ]: wiki-links \"Wiki Links\" [ github-pages ]: github-pages \"Github Pages\" You can open the raw markdown to see them at the bottom of this file","title":"Example"},{"location":"reference/link-reference-definitions/#specification","text":"The three components of a link reference definition are [link-label]: link-target \"Link Title\" link label: The link text to match in the surrounding markdown document. This matches the inner bracket of the double-bracketed [[wiki-link]] notation link destination The target of the matched link By default we generate links without extension. This can be overridden, see Configuration below \"Link Title\" Optional title for link (The Foam template has a snippet of JavaScript to replace this on the website at runtime)","title":"Specification"},{"location":"reference/link-reference-definitions/#configuration","text":"You can choose to generate link reference definitions with or without file extensions, depending on the target. As a rule of thumb: Links with file extensions work better with standard markdown-based tools, such as GitHub web UI. Links without file extensions work better with certain web publishing tools that treat links as literal urls and don't transform them automatically, such as the standard GitHub pages installation. By default, Foam generates links without file extensions for legacy reasons, but this may change in future versions. You can override this setting in your Foam workspace's settings.json : \"foam.edit.linkReferenceDefinitions\": \"withoutExtensions\" (default) \"foam.edit.linkReferenceDefinitions\": \"withExtensions\"","title":"Configuration"},{"location":"reference/link-reference-definitions/#ignoring-files","text":"Sometimes, you may want to ignore certain files or folders, so that Foam doesn't generate link reference definitions to them. For instance, if you're using a local instance of Jekyll , you may find that it writes copies of each .md file into a _site directory, which may lead to Foam generating references to them instead of the original source notes. You can ignore the _site directory by adding the following to your .vscode/settings.json : \"files.exclude\" : { \"**/_site\" : true } , \"files.watcherExclude\" : { \"**/_site\" : true } , After changing the setting in your workspace, you can run the workspace-janitor command to convert all existing definitions. Todo _Implement a `foam.eclude","title":"Ignoring files"},{"location":"reference/link-reference-definitions/#future-improvements","text":"See link-reference-definition-improvements for further discussion on current problems and potential solutions.","title":"Future improvements"},{"location":"reference/linking-between-published-workspaces/","text":"Linking between Published Workspaces (stub) # todo This roadmap item needs more specification work. If you're interested in working on it, please start a conversation in GitHub issues .","title":"Linking between Published Workspaces (stub)"},{"location":"reference/linking-between-published-workspaces/#linking-between-published-workspaces-stub","text":"todo This roadmap item needs more specification work. If you're interested in working on it, please start a conversation in GitHub issues .","title":"Linking between Published Workspaces (stub)"},{"location":"reference/make-backlinks-more-prominent/","text":"Make Backlinks More Prominent # One of the most most common early feature requests in Foam is to make the Markdown Notes Backlinks Explorer more prominent. At the moment, you can drag the explorer pane to your bottom pane, and either show it side by side with another pane, or have take the full width of the editor: In the future we'll want to improve this feature by materialized-backlinks Providing more context around back link reference Could be done by tweaking Markdown Notes slightly. Maybe a user setting? Make back links editable using VS Code Search Editors Suggested by @Jash on Discord","title":"Make Backlinks More Prominent"},{"location":"reference/make-backlinks-more-prominent/#make-backlinks-more-prominent","text":"One of the most most common early feature requests in Foam is to make the Markdown Notes Backlinks Explorer more prominent. At the moment, you can drag the explorer pane to your bottom pane, and either show it side by side with another pane, or have take the full width of the editor: In the future we'll want to improve this feature by materialized-backlinks Providing more context around back link reference Could be done by tweaking Markdown Notes slightly. Maybe a user setting? Make back links editable using VS Code Search Editors Suggested by @Jash on Discord","title":"Make Backlinks More Prominent"},{"location":"reference/materialized-backlinks/","text":"Materialized Backlinks (stub) # todo This roadmap item needs more specification work. If you're interested in working on it, please start a conversation in GitHub issues . Notes # The idea would be to automatically generate lists of backlinks (and optionally, also forward links) into the bottom of every markdown document to Make every link two-way navigable in published sites Make Foam notes more portable to different apps and long-term storage","title":"Materialized Backlinks (stub)"},{"location":"reference/materialized-backlinks/#materialized-backlinks-stub","text":"todo This roadmap item needs more specification work. If you're interested in working on it, please start a conversation in GitHub issues .","title":"Materialized Backlinks (stub)"},{"location":"reference/materialized-backlinks/#notes","text":"The idea would be to automatically generate lists of backlinks (and optionally, also forward links) into the bottom of every markdown document to Make every link two-way navigable in published sites Make Foam notes more portable to different apps and long-term storage","title":"Notes"},{"location":"reference/mdx-by-default/","text":"MDX by Default(stub) # todo This roadmap item needs more specification work. If you're interested in working on it, please start a conversation in GitHub issues .","title":"MDX by Default(stub)"},{"location":"reference/mdx-by-default/#mdx-by-defaultstub","text":"todo This roadmap item needs more specification work. If you're interested in working on it, please start a conversation in GitHub issues .","title":"MDX by Default(stub)"},{"location":"reference/mobile-apps/","text":"Mobile Apps # We must always ask ourselves, build-vs-assemble . This Roadmap item discusses existing assembled solutions, and some thoughts on future Foam mobile experience. Existing solutions # GitJournal # Pros # Open source Already a usable solution. Provides functionality to edit, create, and browser markdown files. Support journal mode, todo lists, and free writing Syncs to GitHub repo Supports Wiki Links Supports Backlinks Developer is happy to prioritize Foam compatibility Cons # Doesn't generate link reference lists (but this is ok, since workspace-janitor as a GitHub action can solve this) Not as sleek as Apple/Google notes, some keyboard state glitching on Android, etc. Lack of control over roadmap. Established product with a paid plan, so may not be open to Foam-supportive changes and additions that don't benefit most users. Verdict: Good. By far best effort/outcome ratio would be to help improve GitJournal rather than building a bespoke mobile app . Bespoke mobile app for Foam # Given we already have a solution, why would we spend time and effort building a bespoke mobile app? Taking notes on the go is a key part of a good note taking process, and the process should feel effortless Having a custom app could help us support key user workflows in a more Foam-specific manner If such an app was worth building, it would have to have the following features: Instant loading and syncing for quick notes Sleek, simple, beautifully designed user experience. Ability to search and navigate forward links and back links (onlly in paid GitJournal version) Killer feature that makes it the best note taking tool for Foam (?) Given the effort vs reward ratio, it's a low priority for core team, but if someone wants to work on this, we can provide support! Talk to us on the #mobile-apps channel on Foam Discord .","title":"Mobile Apps"},{"location":"reference/mobile-apps/#mobile-apps","text":"We must always ask ourselves, build-vs-assemble . This Roadmap item discusses existing assembled solutions, and some thoughts on future Foam mobile experience.","title":"Mobile Apps"},{"location":"reference/mobile-apps/#existing-solutions","text":"","title":"Existing solutions"},{"location":"reference/mobile-apps/#gitjournal","text":"","title":"GitJournal"},{"location":"reference/mobile-apps/#pros","text":"Open source Already a usable solution. Provides functionality to edit, create, and browser markdown files. Support journal mode, todo lists, and free writing Syncs to GitHub repo Supports Wiki Links Supports Backlinks Developer is happy to prioritize Foam compatibility","title":"Pros"},{"location":"reference/mobile-apps/#cons","text":"Doesn't generate link reference lists (but this is ok, since workspace-janitor as a GitHub action can solve this) Not as sleek as Apple/Google notes, some keyboard state glitching on Android, etc. Lack of control over roadmap. Established product with a paid plan, so may not be open to Foam-supportive changes and additions that don't benefit most users. Verdict: Good. By far best effort/outcome ratio would be to help improve GitJournal rather than building a bespoke mobile app .","title":"Cons"},{"location":"reference/mobile-apps/#bespoke-mobile-app-for-foam","text":"Given we already have a solution, why would we spend time and effort building a bespoke mobile app? Taking notes on the go is a key part of a good note taking process, and the process should feel effortless Having a custom app could help us support key user workflows in a more Foam-specific manner If such an app was worth building, it would have to have the following features: Instant loading and syncing for quick notes Sleek, simple, beautifully designed user experience. Ability to search and navigate forward links and back links (onlly in paid GitJournal version) Killer feature that makes it the best note taking tool for Foam (?) Given the effort vs reward ratio, it's a low priority for core team, but if someone wants to work on this, we can provide support! Talk to us on the #mobile-apps channel on Foam Discord .","title":"Bespoke mobile app for Foam"},{"location":"reference/officially-support-alternative-templates/","text":"Officially Support Alternative Templates (stub) # todo This roadmap item needs more specification work. If you're interested in working on it, please start a conversation in GitHub issues . Notes #","title":"Officially Support Alternative Templates (stub)"},{"location":"reference/officially-support-alternative-templates/#officially-support-alternative-templates-stub","text":"todo This roadmap item needs more specification work. If you're interested in working on it, please start a conversation in GitHub issues .","title":"Officially Support Alternative Templates (stub)"},{"location":"reference/officially-support-alternative-templates/#notes","text":"","title":"Notes"},{"location":"reference/packaged-desktop-app/","text":"Packaged Desktop App (stub) # todo This roadmap item needs more specification work. If you're interested in working on it, please start a conversation in GitHub issues .","title":"Packaged Desktop App (stub)"},{"location":"reference/packaged-desktop-app/#packaged-desktop-app-stub","text":"todo This roadmap item needs more specification work. If you're interested in working on it, please start a conversation in GitHub issues .","title":"Packaged Desktop App (stub)"},{"location":"reference/predefined-user-snippets/","text":"Pre-defined User Snippets # Having pre-defined user snippets would enable us to introduce Roam style commands to Foam. Consider the below snippets: { \"Zettelkasten Id\" : { \"scope\" : \"markdown\" , \"prefix\" : \"/id\" , \"description\" : \"Zettelkasten Id\" , \"body\" : [ \"${CURRENT_YEAR}-${CURRENT_MONTH}-${CURRENT_DATE} ${CURRENT_HOUR}:${CURRENT_MINUTE}:${CURRENT_SECOND}\" ] }, \"Current date\" : { \"scope\" : \"markdown\" , \"prefix\" : \"/date\" , \"description\" : \"Current date\" , \"body\" : [ \"${CURRENT_YEAR}-${CURRENT_MONTH}-${CURRENT_DATE} ${CURRENT_HOUR}:${CURRENT_MINUTE}:${CURRENT_SECOND}\" ] } } Which would look like: Using snippets enables Foam users to add custom-snippets themselves so they live alongside the first-class /commands . Notes & Considerations # VS Code supplies \"commands\" already via the command palette Consider the UX around this. Users less familiar with VS Code are more likely to be familiar with / to trigger a command menu. Experienced VS Code users may be more likely to favour the command palette. We can use TabCompletionProvider and snippets and mix them (maybe) via the following VS Code setting: \"editor.snippetSuggestions\": \"inline\" | \"top\" | \"bottom\" | \"none\" For more discussion, consult the PR here . Simplifying Markdown Syntax # Some markdown syntax is difficult for users who have never authored markdown before. Take for example a checkbox/todo. The following syntax is required: - [ ] Something todo... We could provide snippets that expand out into the associated markdown syntax, like in the below GIF: The JSON for these snippets can be found here .","title":"Pre-defined User Snippets"},{"location":"reference/predefined-user-snippets/#pre-defined-user-snippets","text":"Having pre-defined user snippets would enable us to introduce Roam style commands to Foam. Consider the below snippets: { \"Zettelkasten Id\" : { \"scope\" : \"markdown\" , \"prefix\" : \"/id\" , \"description\" : \"Zettelkasten Id\" , \"body\" : [ \"${CURRENT_YEAR}-${CURRENT_MONTH}-${CURRENT_DATE} ${CURRENT_HOUR}:${CURRENT_MINUTE}:${CURRENT_SECOND}\" ] }, \"Current date\" : { \"scope\" : \"markdown\" , \"prefix\" : \"/date\" , \"description\" : \"Current date\" , \"body\" : [ \"${CURRENT_YEAR}-${CURRENT_MONTH}-${CURRENT_DATE} ${CURRENT_HOUR}:${CURRENT_MINUTE}:${CURRENT_SECOND}\" ] } } Which would look like: Using snippets enables Foam users to add custom-snippets themselves so they live alongside the first-class /commands .","title":"Pre-defined User Snippets"},{"location":"reference/predefined-user-snippets/#notes-considerations","text":"VS Code supplies \"commands\" already via the command palette Consider the UX around this. Users less familiar with VS Code are more likely to be familiar with / to trigger a command menu. Experienced VS Code users may be more likely to favour the command palette. We can use TabCompletionProvider and snippets and mix them (maybe) via the following VS Code setting: \"editor.snippetSuggestions\": \"inline\" | \"top\" | \"bottom\" | \"none\" For more discussion, consult the PR here .","title":"Notes &amp; Considerations"},{"location":"reference/predefined-user-snippets/#simplifying-markdown-syntax","text":"Some markdown syntax is difficult for users who have never authored markdown before. Take for example a checkbox/todo. The following syntax is required: - [ ] Something todo... We could provide snippets that expand out into the associated markdown syntax, like in the below GIF: The JSON for these snippets can be found here .","title":"Simplifying Markdown Syntax"},{"location":"reference/publishing-pages/","text":"Publishing pages # Foam pages can be published. # Foam site generator? # Another case of the build-vs-assemble dilemma. We could provide a better publishing experience by building a bespoke static site generator (or a gatsby plugin) that's aware of Foam conventions (backlinks etc.) Eventually we should probably do it, as that would unlock a huge amount of power, but we should always strive to keep it optional. At a bare minimum, Foam repos should remain valid markdown, and should be publishable by any sufficiently complete markdown to html generation tools. Would be cool if Foam pages could be published. Some ideas here. Easymode: Make your GitHub public Static site generator integration, publish from GH actions to GitHub pages / Netlify etc!!! Add annotations to pages for setting visibility (many ways to do this) Public by default, and @private annotations Private by default, and @public annotations Only public /public folder, just move a document there, no annotation needed More granular access control? Email someone a link with a hash? Testing","title":"Publishing pages"},{"location":"reference/publishing-pages/#publishing-pages","text":"Foam pages can be published.","title":"Publishing pages"},{"location":"reference/publishing-pages/#_1","text":"","title":""},{"location":"reference/publishing-pages/#foam-site-generator","text":"Another case of the build-vs-assemble dilemma. We could provide a better publishing experience by building a bespoke static site generator (or a gatsby plugin) that's aware of Foam conventions (backlinks etc.) Eventually we should probably do it, as that would unlock a huge amount of power, but we should always strive to keep it optional. At a bare minimum, Foam repos should remain valid markdown, and should be publishable by any sufficiently complete markdown to html generation tools. Would be cool if Foam pages could be published. Some ideas here. Easymode: Make your GitHub public Static site generator integration, publish from GH actions to GitHub pages / Netlify etc!!! Add annotations to pages for setting visibility (many ways to do this) Public by default, and @private annotations Private by default, and @public annotations Only public /public folder, just move a document there, no annotation needed More granular access control? Email someone a link with a hash? Testing","title":"Foam site generator?"},{"location":"reference/publishing-permissions/","text":"Publishing Permissions(stub) # todo This roadmap item needs more specification work. If you're interested in working on it, please start a conversation in GitHub issues . Notes # Public and private pages Share specific page (with private hash)","title":"Publishing Permissions(stub)"},{"location":"reference/publishing-permissions/#publishing-permissionsstub","text":"todo This roadmap item needs more specification work. If you're interested in working on it, please start a conversation in GitHub issues .","title":"Publishing Permissions(stub)"},{"location":"reference/publishing-permissions/#notes","text":"Public and private pages Share specific page (with private hash)","title":"Notes"},{"location":"reference/random-thoughts/","text":"Random thoughts #","title":"Random thoughts"},{"location":"reference/random-thoughts/#random-thoughts","text":"","title":"Random thoughts"},{"location":"reference/reading-list/","text":"Reading list # Zettelkasten article, recommended by tchayen Suping up VS Code as a Markdown editor VSCode Extensions Packs Todo Evaluate for deployment Dark mode","title":"Reading list"},{"location":"reference/reading-list/#reading-list","text":"Zettelkasten article, recommended by tchayen Suping up VS Code as a Markdown editor VSCode Extensions Packs Todo Evaluate for deployment Dark mode","title":"Reading list"},{"location":"reference/real-time-collaboration/","text":"Real-time Collaboration # Can already use VS Code live share for this","title":"Real-time Collaboration"},{"location":"reference/real-time-collaboration/#real-time-collaboration","text":"Can already use VS Code live share for this","title":"Real-time Collaboration"},{"location":"reference/refactoring-via-language-server-protocol/","text":"Refactoring via Language Server Protocol (stub) # todo This roadmap item needs more specification work. If you're interested in working on it, please start a conversation in GitHub issues .","title":"Refactoring via Language Server Protocol (stub)"},{"location":"reference/refactoring-via-language-server-protocol/#refactoring-via-language-server-protocol-stub","text":"todo This roadmap item needs more specification work. If you're interested in working on it, please start a conversation in GitHub issues .","title":"Refactoring via Language Server Protocol (stub)"},{"location":"reference/referencing-notes-by-title/","text":"Referencing notes by title # Currently we reference notes with [Description](desription.md) syntax. Pros Supported by all static site generators Supported by Markdown All in One Cons Unergonomic to write Knowing file name should not be important Makes unlinked-references harder Makes renaming-files harder Possible syntaxes [Title of page] Pro: Already supported by Markdown and GH Pages publishing Con: Possibly syntactically ambiguous [[Title of page]] Pros: Roam format, syntactically more specific Cons: Not valid Markdown? Trialling VS Code Markdown Notes Read also: https://kortina.nyc/essays/suping-up-vs-code-as-a-markdown-notebook/ This works, also supports backlinks Breaks GitHub page generation `[[title_of_page.md]] Keep current syntax, but automate linking, e.g. a snippet/shortcut to: Insert []() (opens file autocompletion) Once file is chosen in () , populate the description in [] automatically from page tite Pros: Compatible with Markdown All in One Cons: Not as sleek as other options Can MDX help us here?","title":"Referencing notes by title"},{"location":"reference/referencing-notes-by-title/#referencing-notes-by-title","text":"Currently we reference notes with [Description](desription.md) syntax. Pros Supported by all static site generators Supported by Markdown All in One Cons Unergonomic to write Knowing file name should not be important Makes unlinked-references harder Makes renaming-files harder Possible syntaxes [Title of page] Pro: Already supported by Markdown and GH Pages publishing Con: Possibly syntactically ambiguous [[Title of page]] Pros: Roam format, syntactically more specific Cons: Not valid Markdown? Trialling VS Code Markdown Notes Read also: https://kortina.nyc/essays/suping-up-vs-code-as-a-markdown-notebook/ This works, also supports backlinks Breaks GitHub page generation `[[title_of_page.md]] Keep current syntax, but automate linking, e.g. a snippet/shortcut to: Insert []() (opens file autocompletion) Once file is chosen in () , populate the description in [] automatically from page tite Pros: Compatible with Markdown All in One Cons: Not as sleek as other options Can MDX help us here?","title":"Referencing notes by title"},{"location":"reference/renaming-files/","text":"Renaming files (stub) # todo This roadmap item needs more specification work. If you're interested in working on it, please start a conversation in GitHub issues .","title":"Renaming files (stub)"},{"location":"reference/renaming-files/#renaming-files-stub","text":"todo This roadmap item needs more specification work. If you're interested in working on it, please start a conversation in GitHub issues .","title":"Renaming files (stub)"},{"location":"reference/requirements/","text":"Requirements # Foam tries to impose as few requirements as possible, but some constraints are necessary to build interoperable tools. Documents must be written in markdown (or a markdown superset like MDX, or an as-yet-unspecified hypothetical Foam format). Documents must start with Level 1 # Heading , and the content of the heading is the title of the page.","title":"Requirements"},{"location":"reference/requirements/#requirements","text":"Foam tries to impose as few requirements as possible, but some constraints are necessary to build interoperable tools. Documents must be written in markdown (or a markdown superset like MDX, or an as-yet-unspecified hypothetical Foam format). Documents must start with Level 1 # Heading , and the content of the heading is the title of the page.","title":"Requirements"},{"location":"reference/search-for-notes/","text":"Search for Notes # todo Add more VS Code search power user tips here Run Cmd + P ( Ctrl + P on Windows ) and type a name (like 'issues') to find a note associated with that name (like 'known-issues.md' ) Run Cmd + Shift + F ( Ctrl + Shift + F on Windows ) and type a word (like 'links') to find all the notes that contain that term.","title":"Search for Notes"},{"location":"reference/search-for-notes/#search-for-notes","text":"todo Add more VS Code search power user tips here Run Cmd + P ( Ctrl + P on Windows ) and type a name (like 'issues') to find a note associated with that name (like 'known-issues.md' ) Run Cmd + Shift + F ( Ctrl + Shift + F on Windows ) and type a word (like 'links') to find all the notes that contain that term.","title":"Search for Notes"},{"location":"reference/search-in-published-workspace/","text":"Search in Published Workspace (stub) # todo This roadmap item needs more specification work. If you're interested in working on it, please start a conversation in GitHub issues . Notes #","title":"Search in Published Workspace (stub)"},{"location":"reference/search-in-published-workspace/#search-in-published-workspace-stub","text":"todo This roadmap item needs more specification work. If you're interested in working on it, please start a conversation in GitHub issues .","title":"Search in Published Workspace (stub)"},{"location":"reference/search-in-published-workspace/#notes","text":"","title":"Notes"},{"location":"reference/terminology/","text":"Terminology # It would be good to have some shared terminology to talk about Foam concepts. Some in-group terminology is acceptable, but we shouldn't be obtuse just to be exclusive. Here's some ideas, these are open for discussion. Foam, the software project # The set of tools and ideas collected in this organisation. (Your) Foam # The directory/repository where you keep all your notes. Also happens to sound quite a lot like Home. Funny, that. Bubble # Individual Foam note, written in Markdown.","title":"Terminology"},{"location":"reference/terminology/#terminology","text":"It would be good to have some shared terminology to talk about Foam concepts. Some in-group terminology is acceptable, but we shouldn't be obtuse just to be exclusive. Here's some ideas, these are open for discussion.","title":"Terminology"},{"location":"reference/terminology/#foam-the-software-project","text":"The set of tools and ideas collected in this organisation.","title":"Foam, the software project"},{"location":"reference/terminology/#your-foam","text":"The directory/repository where you keep all your notes. Also happens to sound quite a lot like Home. Funny, that.","title":"(Your) Foam"},{"location":"reference/terminology/#bubble","text":"Individual Foam note, written in Markdown.","title":"Bubble"},{"location":"reference/tutorial-adding-a-new-command-to-the-vs-code-extension/","text":"Tutorial: Adding a New Command to the VS Code Extension # This tutorial will walk you through adding a new command to the VS Code extension. Let's try adding a new command to foam-vscode . 1. Navigate to packages/foam-vscode/src/extension.ts 2. Find the activate function 3. Register a new command: export function activate(context: ExtensionContext) { context.subscriptions.push( commands.registerCommand( \"foam-vscode.update-wikilinks\", updateReferenceList ), + commands.registerCommand( + \"foam-vscode.hello-friend\", + () => { + . window.showInformationMessage(\"Hello, friend!); + } + ), workspace.onWillSaveTextDocument(onWillSave), languages.registerCodeLensProvider( mdDocSelector, new WikilinkReferenceCodeLensProvider() ) ); } 4. Navigate to packages/foam-vscode/package.json 5. Add your command to the contributes.commands array: \"contributes\": { \"commands\": [ { \"command\": \"foam-vscode.update-wikilinks\", \"title\": \"Foam: Update Markdown Reference List\" + }, + { + \"command\": \"foam-vscode.hello-friend\", + \"title\": \"Foam: Hello Friend\", + }, ] }, 6. Press f5 to run the new extension host, or restart the extension host if it's already running. 7. Test out your new command. Open the Command Palette (Ctrl/Cmd + Shift + P) and select \"Foam: Hello Friend\". You should see an information pop up in the corner of the screen. And that's how you add new commands! We look forward to your contributions. More resources: - Your First Extension - vscode-extension-samples F.A.Q. # How do I write a test for my extension addition? This is still a work in progress. We've opted for Jest as our testing framework. There are currently no end-to-end tests (contributions are welcome!). However, we would encourage you to write tests for anything that you can test. We're happy to discuss on PRs too! How do I know if using the local version of the Foam extension vs. the produciton one while testing locally? When you start the extension development host, the local version of the extension \"shadows\" or overrides any installed versions of the package with the same ID. So when you F5/start the extension host, you should always be running the local version, plus any other extensions your workspace/vscode is configured to run. As far as we know, you can't run the \"shadowed\" base install while running the local extension","title":"Tutorial: Adding a New Command to the VS Code Extension"},{"location":"reference/tutorial-adding-a-new-command-to-the-vs-code-extension/#tutorial-adding-a-new-command-to-the-vs-code-extension","text":"This tutorial will walk you through adding a new command to the VS Code extension. Let's try adding a new command to foam-vscode . 1. Navigate to packages/foam-vscode/src/extension.ts 2. Find the activate function 3. Register a new command: export function activate(context: ExtensionContext) { context.subscriptions.push( commands.registerCommand( \"foam-vscode.update-wikilinks\", updateReferenceList ), + commands.registerCommand( + \"foam-vscode.hello-friend\", + () => { + . window.showInformationMessage(\"Hello, friend!); + } + ), workspace.onWillSaveTextDocument(onWillSave), languages.registerCodeLensProvider( mdDocSelector, new WikilinkReferenceCodeLensProvider() ) ); } 4. Navigate to packages/foam-vscode/package.json 5. Add your command to the contributes.commands array: \"contributes\": { \"commands\": [ { \"command\": \"foam-vscode.update-wikilinks\", \"title\": \"Foam: Update Markdown Reference List\" + }, + { + \"command\": \"foam-vscode.hello-friend\", + \"title\": \"Foam: Hello Friend\", + }, ] }, 6. Press f5 to run the new extension host, or restart the extension host if it's already running. 7. Test out your new command. Open the Command Palette (Ctrl/Cmd + Shift + P) and select \"Foam: Hello Friend\". You should see an information pop up in the corner of the screen. And that's how you add new commands! We look forward to your contributions. More resources: - Your First Extension - vscode-extension-samples","title":"Tutorial: Adding a New Command to the VS Code Extension"},{"location":"reference/tutorial-adding-a-new-command-to-the-vs-code-extension/#faq","text":"How do I write a test for my extension addition? This is still a work in progress. We've opted for Jest as our testing framework. There are currently no end-to-end tests (contributions are welcome!). However, we would encourage you to write tests for anything that you can test. We're happy to discuss on PRs too! How do I know if using the local version of the Foam extension vs. the produciton one while testing locally? When you start the extension development host, the local version of the extension \"shadows\" or overrides any installed versions of the package with the same ID. So when you F5/start the extension host, you should always be running the local version, plus any other extensions your workspace/vscode is configured to run. As far as we know, you can't run the \"shadowed\" base install while running the local extension","title":"F.A.Q."},{"location":"reference/user-settings/","text":"User Settings (stub) # todo This roadmap item needs more specification work.","title":"User Settings (stub)"},{"location":"reference/user-settings/#user-settings-stub","text":"todo This roadmap item needs more specification work.","title":"User Settings (stub)"},{"location":"reference/web-editor/","text":"Web Editor (stub) # todo This roadmap item needs more specification work. If you're interested in working on it, please start a conversation in GitHub issues .","title":"Web Editor (stub)"},{"location":"reference/web-editor/#web-editor-stub","text":"todo This roadmap item needs more specification work. If you're interested in working on it, please start a conversation in GitHub issues .","title":"Web Editor (stub)"},{"location":"reference/workspace-janitor/","text":"Janitor # To store your personal knowledge graph in markdown files instead of a database, we need some additional tooling to create and maintain relationships with notes. Foam Janitor (inspired by Andy Matuschak's note-link-janitor ) helps you migrate existing notes to Foam, and maintain your Foam's health over time. Currently, Foam's Janitor helps you to: - Ensure your link-reference-definitions are up to date - Ensure every document has a well-formatted title (required for Markdown Links, Markdown Notes, and Foam Gatsby Template compatibility) In the future, Janitor can help you with - Updating materialized-backlinks - Lint, format and structure notes - Rename and move notes around while keeping their references up to date. Using Janitor from VS Code (Experimental) # Execute the \"Foam: Run Janitor\" command from the command palette. Using Janitor from command line (Experimental) # \u26a0\ufe0f Improvements to this documentation are welcome! The Janitor can be installed from NPM and executed as a standalone CLI tool: > npm install -g foam-cli > foam janitor path/to/workspace You can run the Janitor as a git hook on every commit to ensure your workspace links are up to date. This can be especially helpful if you edit your markdown documents from other apps. You can also run the Janitor from a GitHub action to ensure that all changes coming to your workspace are up to date. This can be useful when editing your Foam notes from mobile (i.e. via GitJournal ), or your Foam has multiple contributors and you want to ensure that all changes are correctly integrated.","title":"Janitor"},{"location":"reference/workspace-janitor/#janitor","text":"To store your personal knowledge graph in markdown files instead of a database, we need some additional tooling to create and maintain relationships with notes. Foam Janitor (inspired by Andy Matuschak's note-link-janitor ) helps you migrate existing notes to Foam, and maintain your Foam's health over time. Currently, Foam's Janitor helps you to: - Ensure your link-reference-definitions are up to date - Ensure every document has a well-formatted title (required for Markdown Links, Markdown Notes, and Foam Gatsby Template compatibility) In the future, Janitor can help you with - Updating materialized-backlinks - Lint, format and structure notes - Rename and move notes around while keeping their references up to date.","title":"Janitor"},{"location":"reference/workspace-janitor/#using-janitor-from-vs-code-experimental","text":"Execute the \"Foam: Run Janitor\" command from the command palette.","title":"Using Janitor from VS Code (Experimental)"},{"location":"reference/workspace-janitor/#using-janitor-from-command-line-experimental","text":"\u26a0\ufe0f Improvements to this documentation are welcome! The Janitor can be installed from NPM and executed as a standalone CLI tool: > npm install -g foam-cli > foam janitor path/to/workspace You can run the Janitor as a git hook on every commit to ensure your workspace links are up to date. This can be especially helpful if you edit your markdown documents from other apps. You can also run the Janitor from a GitHub action to ensure that all changes coming to your workspace are up to date. This can be useful when editing your Foam notes from mobile (i.e. via GitJournal ), or your Foam has multiple contributors and you want to ensure that all changes are correctly integrated.","title":"Using Janitor from command line (Experimental)"}]}